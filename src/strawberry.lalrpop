use crate::grammar::ast::class::*;
use crate::grammar::ast::expr::*;
use crate::grammar::token::Token;
use crate::grammar::lexer::{LineNum, LexicalError};
use crate::grammar::ast::Type;

grammar<'input>;

// * => zero or more
// + => once or more
// ? => zero or once
pub Program = <import*>  <class*>;

import: Import = {
    "FROM" <s:"STR"> "IMPORT" <class_name_:all_type> ";" => Import{
        file_name:s,
        class_name:class_name_,
    },
};

class: Class = {
    <l:"class"> <class_name:"TYPE"> "{" <f:feature*> "}" ";" => Class {
        name: class_name,
        parent: None,
        features: f,
        position: l.0,
        file_name: l.1,
    },
    <l:"class"> <class_name:"TYPE"> "inherits" <parent_name:"TYPE"> "{" <f:feature*> "}" ";" => Class {
        name: class_name,
        parent: Some(parent_name),
        features: f,
        position: l.0,
        file_name: l.1,
    },
};

feature: Feature = {
    // attr
    "private"? <attr_name:"ID"> ":" <type_name:all_type> ";" => {
        Feature::Attribute(VarDecl {
            name: attr_name.0,
            type_: Some(type_name),
            init: Box::new(None),
            position: attr_name.1,
            ownership: Ownership::Private,
        })
    },
    "public" <attr_name:"ID"> ":" <type_name:all_type> ";" => {
        Feature::Attribute(VarDecl {
            name: attr_name.0,
            type_: Some(type_name),
            init: Box::new(None),
            position: attr_name.1,
            ownership: Ownership::Public,
        })
    },

    "private"? <attr_name:"ID"> ":" <type_name:all_type> "=" <e:single_expr> ";" => {
        Feature::Attribute(VarDecl{
            name:attr_name.0,
            type_:Some(type_name),
            init:Box::new(Some(e)),
            position: attr_name.1,
            ownership: Ownership::Private,
        })
    },
    "public" <attr_name:"ID"> ":" <type_name:all_type> "=" <e:single_expr> ";" => {
        Feature::Attribute(VarDecl{
            name:attr_name.0,
            type_:Some(type_name),
            init:Box::new(Some(e)),
            position: attr_name.1,
            ownership: Ownership::Public,
        })
    },


    
    // method
    "private"? <pos:"fun"> <method_name:"ID"> "(" <param_:comma_list<param>?>  ")" "->" <r_type:all_type> "{" <e:semi_list<expr>>  "}" ";" => {
        Feature::Method(MethodDecl{
            name: method_name.0,
            param: Box::new(param_.unwrap_or(vec![])),
            return_type:r_type,
            body: Box::new(Some(e)),
            position: pos,
            ownership: Ownership::Private,
            // body: Box::new(Box::new(e)),
        })
    },
    "public" <pos:"fun"> <method_name:"ID"> "(" <param_:comma_list<param>?>  ")" "->" <r_type:all_type> "{" <e:semi_list<expr>>  "}" ";" => {
        Feature::Method(MethodDecl{
            name: method_name.0,
            param: Box::new(param_.unwrap_or(vec![])),
            return_type:r_type,
            body: Box::new(Some(e)),
            position: pos,
            ownership: Ownership::Public,
            // body: Box::new(Box::new(e)),
        })
    },

    "private"? <pos: "fun"> <method_name:"ID"> "(" <param_:comma_list<param>?> ")" "->" <r_type:all_type> "{"   "}"  ";"=> {
        Feature::Method(MethodDecl{
            name: method_name.0,
            param: Box::new(param_.unwrap_or(vec![])),
            return_type:r_type,
            body: Box::new(None),
            position: pos,
            ownership: Ownership::Private,
        })
    },
    "public" <pos: "fun"> <method_name:"ID"> "(" <param_:comma_list<param>?> ")" "->" <r_type:all_type> "{"   "}"  ";"=> {
        Feature::Method(MethodDecl{
            name: method_name.0,
            param: Box::new(param_.unwrap_or(vec![])),
            return_type:r_type,
            body: Box::new(None),
            position: pos,
            ownership: Ownership::Public,
        })
    },

    // constructor
    <pos:"constructor"> "(" <param_:comma_list<param>?> ")" "{" <e:semi_list<expr>> "}" ";" =>{
        Feature::Constructor(ConstructorDecl{
           param: Box::new(param_.unwrap_or(vec![])),
            body: Box::new(Some(e)),
            position:pos,
        })
    },
    <pos:"constructor"> "(" <param_:comma_list<param>?> ")" "{"  "}" ";" =>{
        Feature::Constructor(ConstructorDecl{
           param: Box::new(param_.unwrap_or(vec![])),
           body: Box::new(None),
            position:pos,
        })
    },

};

param: ParamDecl = {
    <id:"ID"> ":" <t:all_type> => (id.0,t),
};

// let var
var: VarDecl = {
    <id:"ID"> ":" <type_name:all_type> => VarDecl{
        name:id.0,
        type_: Some(type_name),
        init: Box::new(None),
        position: id.1,
        ownership: Ownership::Default,
    },
    <id:"ID"> ":" <type_name:all_type> "=" <e:math_expr> => VarDecl{
        name:id.0,
        type_: Some(type_name),
        init: Box::new(Some(e)),
        position: id.1,
        ownership: Ownership::Default,
    },

    <id:"ID">  "=" <e:math_expr> => VarDecl{
        name:id.0,
        type_: None,
        init: Box::new(Some(e)),
        position: id.1,
        ownership: Ownership::Default,
    },
};

let_expr:Expr = {
    "let" <var_:comma_list<var>> ";"=> Expr::Let(Let{var_decls:Box::new(var_)}),
};

assign_expr:Expr = {
    <id:"ID"> "=" <expr :math_expr>";" => Expr::Assignment(Assignment{id:id.0, compute:Box::new(expr),position:id.1}),
};

// let assign if while 
expr: Expr = {
    
    <e:single_expr> "." <id:"ID"> "(" <args:comma_list<math_expr>?> ")" ";" => {
        Expr::Dispatch (Dispatch{
            target: Box::new(e),
            // fun_name: id.0,
            // actual: Box::new(args.unwrap_or(vec![])),
            expr: DispatchExpr::Method(MethodCall{
                fun_name: id.0,
                actual: Box::new(args.unwrap_or(vec![])),
            }),
            position: id.1,
            type_: "Object".to_string()
        })
    },
    
    
    <id:"ID"> "(" <args:comma_list<math_expr>?>  ")"  ";"=> {
        Expr::Dispatch (Dispatch{
            target: Box::new(Expr::Self_(Self_{
                type_:"Object".to_string()
            }
            )),
            // fun_name: id.0,
            // actual: Box::new(args.unwrap_or(vec![])),
            expr: DispatchExpr::Method(MethodCall{
                fun_name: id.0,
                actual: Box::new(args.unwrap_or(vec![])),
            }),
            position: id.1,
            type_: "Object".to_string()
        })
    },

    <pos: "if"> "(" <test_:cond_expr> ")"   "{" <then_:expr*> "}" "else" "{" <else_:expr*> "}"  => Expr::Cond(Cond{
        test:Box::new(test_),
        then_body: Box::new(then_),
        else_body: Box::new(else_),
        position: pos,
    }),

    <pos: "if"> <test_:cond_expr>   "{" <then_:expr*> "}" "else" "{" <else_:expr*> "}"  => Expr::Cond(Cond{
        test:Box::new(test_),
        then_body: Box::new(then_),
        else_body: Box::new(else_),
        position: pos,
    }),

    <pos:"while">  "(" <test_:cond_expr> ")" "{" <body_:expr*> "}" => Expr::While(While{
        test:Box::new(test_),
        body: Box::new(body_),
        position: pos,
    }),

    <pos: "while"> <test_:cond_expr> "{" <body_:expr*> "}" => Expr::While(While{
        test:Box::new(test_),
        body: Box::new(body_),
        position: pos,
    }),

    <pos: "for"> "(" <init_:let_expr*>  <test_:cond_expr*> ";" <iter_:comma_list<expr>> ")" "{" <body_:expr*> "}" => Expr::For(For{
        init: Box::new(init_),
        test: Box::new(test_),
        iter: Box::new(iter_),
        body: Box::new(body_),
        position: pos,
    }),

    <pos: "return">  <val:cond_expr> ";"=> Expr::Return(Return{
        val: Some(Box::new(val)),
        position: pos,
    }),

    <pos: "return"> ";"=> Expr::Return(Return{
        val: None,
        position: pos,
    }),

    "asm" "(" <s:"STR"> ")" ";"=> Expr::ASM(s),

    math_expr,
    let_expr,
    assign_expr,
};

single_expr:Expr = {
    <id:"ID"> => Expr::Identifier(IdentifierSrtuct {
        name: id.0,
        pos: id.1,
        type_: "Object".to_string()
    }),
    <s:"STR"> => Expr::Str(s),
    <e:"self"> => Expr::Self_(Self_{
        type_:"Object".to_string()
    }),
    <b:"BOOL"> => Expr::Bool(b),
    <i:"INT"> => Expr::Int(i.parse::<u64>().unwrap()), 
    // <s:"self"> => Expr::Self_(s),
    
    <pos:"new"> <class_name_:all_type> => Expr::New(ConstructorCall{
        class_name: class_name_,
        param: None,
        position: pos,
    }), 
    <pos:"new"> <class_name_:all_type> "(" <args:comma_list<math_expr>?> ")" => Expr::New(ConstructorCall{
        class_name: class_name_,
        param: Some(Box::new(args.unwrap_or(vec![]))),
        position: pos,
    }), 


    <id:"ID"> "(" <args:comma_list<math_expr>?>  ")" => {
        Expr::Dispatch (Dispatch{
            // target: Box::new(Some("self".to_string())),
            // target:Box::new(Some(Expr::Identifier(
            //     IdentifierSrtuct{
            //         name: "self".to_string(),
            //         pos:(0,0),
            //         type_:"Object".to_string()
            //     }))),
            target: Box::new(Expr::Self_(Self_{
                type_:"Object".to_string()
            }
            )),
            // fun_name: id.0,
            // actual: Box::new(args.unwrap_or(vec![])),
            expr: DispatchExpr::Method(MethodCall{
                fun_name: id.0,
                actual: Box::new(args.unwrap_or(vec![])),
            }),
            position: id.1,
            type_: "Object".to_string()
        })
    },
    
    <e:single_expr> "." <id:"ID"> "(" <args:comma_list<math_expr>?> ")" => {
        Expr::Dispatch (Dispatch{
            target: Box::new(e),
            // fun_name: id.0,
            // actual: Box::new(args.unwrap_or(vec![])),
            expr: DispatchExpr::Method(MethodCall{
                fun_name: id.0,
                actual: Box::new(args.unwrap_or(vec![])),
            }),
            position: id.1,
            type_: "Object".to_string()
        })
    },

    <e:single_expr> "." <id:"ID"> =>{
        Expr::Dispatch (Dispatch{
            target: Box::new(e),
            expr: DispatchExpr::Field(id.0),
            position: id.1,
            type_: "Object".to_string()
        })
    }

};

all_type: Type = {
    <class_type: "TYPE">  => class_type,
    <raw_type: "rawtype"> => raw_type,
};

add_minus: MathOp = {
    "+" => MathOp::ComputeOp(ComputeOp::Add),
    "-" => MathOp::ComputeOp(ComputeOp::Minus),
};

mul_div: MathOp = {
    "/" => MathOp::ComputeOp(ComputeOp::Divide),
    "*" => MathOp::ComputeOp(ComputeOp::Mul),
};

cond_op: MathOp = {
    ">" => MathOp::CondOp(CondOp::More),
    "=>" => MathOp::CondOp(CondOp::MoreE),
    "<" => MathOp::CondOp(CondOp::Less),
    "<=" => MathOp::CondOp(CondOp::LessE),
    "==" => MathOp::CondOp(CondOp::Equal),
    // "=>" => MathOp::CondOp::MoreE,
    // "<" => MathOp::CondOp::Less,
    // "<=" => MathOp::CondOp::LessE,
    // "==" => MathOp::CondOp::Equal,
}

math_term:Expr ={
    <l:math_term> <op:mul_div> <r:single_expr> => Expr::Math(Math {
        left: Box::new(l),
        op: Box::new(op),
        right: Box::new(r),
        type_: "Object".to_string(),
    }),
    single_expr,
};

math_expr: Expr = {
    <l:math_expr> <op:add_minus> <r:math_term> => Expr::Math(Math {
        left: Box::new(l),
        op: Box::new(op),
        right: Box::new(r),
        type_: "Object".to_string(),
    }),
    math_term,
};

cond_expr: Expr = {
    <l:math_expr> <op:cond_op> <r:math_expr> => Expr::Math(Math { 
        left: Box::new(l),
        op: Box::new(op),
        right: Box::new(r),
        type_: "Object".to_string(),
    }),
    <pos:"!"> <e:cond_expr> => Expr::Not(Not{
        expr:Box::new(e),
        position: pos,
    }),
    "isnull" "(" <e:single_expr> ")" => Expr::Isnull(Isnull{
        expr:Box::new(e),
    }),
    math_expr,
}


#[inline]
comma_list<T>: Vec<T> = {
    <i1: T> <i2:("," T)*> => {
        let mut items = vec![i1];
        items.extend(i2.into_iter().map(|e| e.1));
        items
    }
};

#[inline]
semi_list<T>:Vec<T> = {
    // <i1: T> <i2:(";" T)*> => {
        <i1: T> <i2: T*> => {
        let mut items = vec![i1];
        items.extend(i2.into_iter().map(|e| e));
        items
    }
}


extern {
    type Location = LineNum;
    type Error = LexicalError;
    // type Pos = Position;

    // Map parser terms to token values:
    enum Token{

        // keywords
        "rawtype" => Token::RawType(<String>),
        "class" => Token::Class_(<(usize,usize)>,<String>),
        "public" => Token::Public,
        "private" => Token::Private,
        "fun" => Token::Function(<(usize,usize)>),
        "return" => Token::Return(<(usize,usize)>),
        "if" => Token::If(<(usize,usize)>),
        "then" => Token::Then,
        "else" => Token::Else(<(usize,usize)>),
        "inherits" => Token::Inherits,
        "let" => Token::Let(<(usize,usize)>),
        "while" => Token::While(<(usize,usize)>),
        "for" => Token::For(<(usize, usize)>),
        "new" => Token::New(<(usize,usize)>),
        "isnull" => Token::Isnull,
        "self" => Token::Self_(<String>),
        "!" => Token::Not(<(usize,usize)>),
        "constructor" => Token::Constructor(<(usize,usize)>),
        "->" => Token::Arrow,
        "asm" => Token::ASM,
        "IMPORT" => Token::Import,
        "FROM" => Token::From,
       

        // const and id and typeid
        "STR" => Token::StringConst(<String>),
        "INT" => Token::IntConst(<String>),
        "BOOL" => Token::BoolConst(<bool>),
        "TYPE" => Token::TypeId(<String>),
        "ID" => Token::Identifier(<String>,<(usize,usize)>),
            
        // op
        "=" => Token::Assign(<(usize,usize)>),
        "+" => Token::Plus,
        "-" => Token::Minus,
        "/" => Token::Divide,
        "*" => Token::Mul,
        "==" => Token::Equal,
        ">" => Token::More,
        "=>" => Token::MoreE,
        "<" => Token::Less,
        "<=" => Token::LessE,
        
        // othens
        "{" => Token::Lbrace,
        "}" => Token::Rbrace,
        "(" => Token::Lparen,
        ")" => Token::Rparen,
        ";" =>Token::Semicolon,
        "." => Token::Period,
        "," => Token::Comma,
        ":" =>Token::Colon,

        

        "ERROR" => Token::Error(<String>),
    }

}

