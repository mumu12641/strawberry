// auto-generated: "lalrpop 0.19.9"
// sha3: 9baef7f92cb77618d6cdb5283f338906c2cfc7d676dd4d53c8426c9c509905cc
use crate::grammar::ast::class::*;
use crate::grammar::ast::expr::*;
use crate::grammar::ast::program::*;
use crate::grammar::token::Token;
use crate::grammar::lexer::{LineNum, LexicalError};
#[allow(unused_extern_crates)]
extern crate lalrpop_util as __lalrpop_util;
#[allow(unused_imports)]
use self::__lalrpop_util::state_machine as __state_machine;
extern crate core;
extern crate alloc;

#[cfg_attr(rustfmt, rustfmt_skip)]
mod __parse__Program {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens, clippy::all)]

    use crate::grammar::ast::class::*;
    use crate::grammar::ast::expr::*;
    use crate::grammar::ast::program::*;
    use crate::grammar::token::Token;
    use crate::grammar::lexer::{LineNum, LexicalError};
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    extern crate core;
    extern crate alloc;
    use super::__ToTriple;
    #[allow(dead_code)]
    pub(crate) enum __Symbol<>
     {
        Variant0(Token),
        Variant1((usize, usize)),
        Variant2(bool),
        Variant3(((usize, usize), String)),
        Variant4(String),
        Variant5((String, (usize, usize))),
        Variant6((Token, Expr)),
        Variant7(alloc::vec::Vec<(Token, Expr)>),
        Variant8((Token, ParamDecl)),
        Variant9(alloc::vec::Vec<(Token, ParamDecl)>),
        Variant10((Token, VarDecl)),
        Variant11(alloc::vec::Vec<(Token, VarDecl)>),
        Variant12(alloc::vec::Vec<Class>),
        Variant13(MathOp),
        Variant14(Class),
        Variant15(Vec<Expr>),
        Variant16(core::option::Option<Vec<Expr>>),
        Variant17(Vec<ParamDecl>),
        Variant18(core::option::Option<Vec<ParamDecl>>),
        Variant19(Vec<VarDecl>),
        Variant20(Expr),
        Variant21(alloc::vec::Vec<Expr>),
        Variant22(Feature),
        Variant23(alloc::vec::Vec<Feature>),
        Variant24(ParamDecl),
        Variant25(VarDecl),
    }
    const __ACTION: &[i16] = &[
        // State 0
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 2
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76,
        // State 3
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78,
        // State 4
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82,
        // State 5
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85,
        // State 6
        0, 0, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 7
        0, 0, 92, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 8
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 97, 0, 0, 98, 0, 0, 99, 0, 100, 0, 0, 0, 0, 0,
        // State 9
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 10
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 11
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 113, 17, 0, 98, 0, 18, 99, 19, 100, 0, 0, 20, 0, 114,
        // State 12
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 113, 17, 0, 98, 0, 18, 99, 19, 100, 0, 0, 20, 0, 115,
        // State 13
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 113, 17, 0, 98, 0, 18, 99, 19, 100, 0, 0, 20, 0, 117,
        // State 14
        0, 0, 0, 0, 118, 0, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -70, 0, 0, 0, 0, -70, -70, 0, -70, 0, -70, -70, -70, -70, 0, 0, -70, 0, -70,
        // State 15
        0, 0, -91, 120, -91, -91, -91, 0, 0, 121, 0, -91, -91, -91, 0, -91, -91, -91, -91, 0, 0, 0, 0, -91, -91, 0, -91, 0, -91, -91, -91, -91, -91, 0, -91, -91, -91,
        // State 16
        0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 97, 0, 0, 98, 0, 0, 99, 0, 100, 0, 0, 0, 0, 0,
        // State 17
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 18
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 97, 0, 0, 98, 0, 0, 99, 0, 100, 0, 0, 0, 0, 0,
        // State 19
        0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 97, 0, 0, 98, 0, 0, 99, 0, 100, 0, 0, 0, 0, 0,
        // State 20
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 113, 17, 0, 98, 0, 18, 99, 19, 100, 0, 0, 20, 0, 128,
        // State 21
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 113, 17, 0, 98, 0, 18, 99, 19, 100, 0, 0, 20, 0, 129,
        // State 22
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 113, 17, 0, 98, 0, 18, 99, 19, 100, 0, 0, 20, 0, 132,
        // State 23
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 97, 0, 0, 98, 0, 0, 99, 0, 100, 0, 0, 0, 0, 0,
        // State 24
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 97, 0, 0, 98, 0, 0, 99, 0, 100, 0, 0, 0, 0, 0,
        // State 25
        0, 0, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 97, 0, 0, 98, 0, 0, 99, 0, 100, 0, 0, 0, 0, 0,
        // State 26
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 97, 0, 0, 98, 0, 0, 99, 0, 100, 0, 0, 0, 0, 0,
        // State 27
        0, 0, -42, 0, 118, 0, 119, 0, 0, 0, 0, 0, 138, 139, 0, 140, 141, 142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -42, 0, 0, -42, 0,
        // State 28
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 97, 0, 0, 98, 0, 0, 99, 0, 100, 0, 0, 0, 0, 0,
        // State 29
        0, 0, 0, 0, 0, 39, 0, 0, 0, 0, 0, 145, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 30
        0, 0, 0, 0, 118, 0, 119, 0, 0, 0, 0, 147, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 31
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 97, 0, 0, 98, 0, 0, 99, 0, 100, 0, 0, 0, 0, 0,
        // State 32
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 113, 17, 0, 98, 0, 18, 99, 19, 100, 0, 0, 20, 0, 149,
        // State 33
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 113, 17, 0, 98, 0, 18, 99, 19, 100, 0, 0, 20, 0, 151,
        // State 34
        0, 0, -90, 120, -90, -90, -90, 0, 0, 121, 0, -90, -90, -90, 0, -90, -90, -90, -90, 0, 0, 0, 0, -90, -90, 0, -90, 0, -90, -90, -90, -90, -90, 0, -90, -90, -90,
        // State 35
        0, 0, 155, 0, 118, 43, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 36
        0, 0, 0, 0, 118, 0, 119, 0, 0, 0, 0, 157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 37
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 97, 0, 0, 98, 0, 0, 99, 0, 100, 0, 0, 0, 0, 0,
        // State 38
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 39
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 113, 17, 0, 98, 0, 18, 99, 19, 100, 0, 0, 20, 0, 162,
        // State 40
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 113, 17, 0, 98, 0, 18, 99, 19, 100, 0, 0, 20, 0, 164,
        // State 41
        0, 0, 167, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 97, 0, 0, 98, 0, 0, 99, 0, 100, 0, 0, 0, 0, 0,
        // State 42
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 97, 0, 0, 98, 0, 0, 99, 0, 100, 0, 0, 0, 0, 0,
        // State 43
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 113, 17, 0, 98, 0, 18, 99, 19, 100, 0, 0, 20, 0, 170,
        // State 44
        0, 0, -41, 0, 118, 0, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -41, 0, 0, -41, 0,
        // State 45
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 46
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 113, 17, 0, 98, 0, 18, 99, 19, 100, 0, 0, 20, 0, 173,
        // State 47
        0, 0, 176, 0, 118, 43, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 48
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 97, 0, 0, 98, 0, 0, 99, 0, 100, 0, 0, 0, 0, 0,
        // State 49
        0, 0, -4, 0, 118, -4, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 50
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 113, 17, 0, 98, 0, 18, 99, 19, 100, 0, 0, 20, 0, 179,
        // State 51
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 97, 0, 0, 98, 0, 0, 99, 0, 100, 0, 0, 0, 0, 0,
        // State 52
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 113, 17, 0, 98, 0, 18, 99, 19, 100, 0, 0, 20, 0, 182,
        // State 53
        0, 0, -5, 0, 118, -5, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 54
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 113, 17, 0, 98, 0, 18, 99, 19, 100, 0, 0, 20, 0, 186,
        // State 55
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 113, 17, 0, 98, 0, 18, 99, 19, 100, 0, 0, 20, 0, 187,
        // State 56
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 113, 17, 0, 98, 0, 18, 99, 19, 100, 0, 0, 20, 0, 189,
        // State 57
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 113, 17, 0, 98, 0, 18, 99, 19, 100, 0, 0, 20, 0, 190,
        // State 58
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 113, 17, 0, 98, 0, 18, 99, 19, 100, 0, 0, 20, 0, 192,
        // State 59
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 113, 17, 0, 98, 0, 18, 99, 19, 100, 0, 0, 20, 0, 193,
        // State 60
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 113, 17, 0, 98, 0, 18, 99, 19, 100, 0, 0, 20, 0, 195,
        // State 61
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 113, 17, 0, 98, 0, 18, 99, 19, 100, 0, 0, 20, 0, 196,
        // State 62
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 113, 17, 0, 98, 0, 18, 99, 19, 100, 0, 0, 20, 0, 197,
        // State 63
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 113, 17, 0, 98, 0, 18, 99, 19, 100, 0, 0, 20, 0, 198,
        // State 64
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 113, 17, 0, 98, 0, 18, 99, 19, 100, 0, 0, 20, 0, 199,
        // State 65
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 66
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 67
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 0, 0, 0,
        // State 68
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 69
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0,
        // State 70
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0,
        // State 71
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0,
        // State 72
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -88, -88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -88,
        // State 73
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 74
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 75
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 76
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -89, -89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -89,
        // State 77
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 78
        0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 79
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0,
        // State 80
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 81
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 82
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 83
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 89, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 84
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 85
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 86
        0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 87
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 88
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -75, -75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -75,
        // State 89
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 90
        0, 0, 101, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 91
        0, 0, 0, 0, 0, 0, 0, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 92
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
        // State 93
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 0, 0, 0,
        // State 94
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 95
        0, 0, -101, -101, -101, -101, -101, 0, -101, -101, 0, -101, -101, -101, 0, -101, -101, -101, -101, 0, 0, 0, 0, -101, -101, 0, -101, 0, -101, -101, -101, -101, -101, 0, -101, -101, -101,
        // State 96
        0, 0, -99, -99, -99, -99, -99, 0, 0, -99, 0, -99, -99, -99, 0, -99, -99, -99, -99, 0, 0, 0, 0, -99, -99, 0, -99, 0, -99, -99, -99, -99, -99, 0, -99, -99, -99,
        // State 97
        0, 0, -102, -102, -102, -102, -102, 0, -102, -102, 0, -102, -102, -102, 0, -102, -102, -102, -102, 0, 0, 0, 0, -102, -102, 0, -102, 0, -102, -102, -102, -102, -102, 0, -102, -102, -102,
        // State 98
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 107, 0, 0, 0,
        // State 99
        0, 0, -100, -100, -100, -100, -100, 0, -100, -100, 0, -100, -100, -100, 0, -100, -100, -100, -100, 0, 0, 0, 0, -100, -100, 0, -100, 0, -100, -100, -100, -100, -100, 0, -100, -100, -100,
        // State 100
        0, 0, 0, 0, 0, 0, 0, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 101
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110, 0, 0, 0,
        // State 102
        0, 0, -9, 0, 0, -9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 103
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0,
        // State 104
        0, 0, -96, 0, 0, -96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 105
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -76, -76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -76,
        // State 106
        0, 0, -103, -103, -103, -103, -103, 0, -103, -103, 0, -103, -103, -103, 0, -103, -103, -103, -103, 0, 0, 0, 0, -103, -103, 0, -103, 0, -103, -103, -103, -103, -103, 0, -103, -103, -103,
        // State 107
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 0, 0, 0,
        // State 108
        0, 0, -10, 0, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 109
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0,
        // State 110
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0,
        // State 111
        0, 0, 0, -93, -93, 0, -93, 0, 122, -93, 0, 0, 0, 0, 0, 0, 0, 0, -93, 0, 0, 0, 0, -93, -93, 0, -93, 0, -93, -93, -93, -93, 0, 0, -93, 0, -93,
        // State 112
        0, 26, 0, -99, -99, 0, -99, 0, -99, -99, 0, 0, 0, 0, 27, 0, 0, 0, -99, 0, 0, 0, 0, -99, -99, 0, -99, 0, -99, -99, -99, -99, 0, 0, -99, 0, -99,
        // State 113
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 114
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 115
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -73, 0, 0, 0, 0, -73, -73, 0, -73, 0, -73, -73, -73, -73, 0, 0, -73, 0, -73,
        // State 116
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 117
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -19, 0, 0, 0, 0, -19, 0, 0, -19, 0, 0, -19, 0, -19, 0, 0, 0, 0, 0,
        // State 118
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -20, 0, 0, 0, 0, -20, 0, 0, -20, 0, 0, -20, 0, -20, 0, 0, 0, 0, 0,
        // State 119
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -95, 0, 0, 0, 0, -95, 0, 0, -95, 0, 0, -95, 0, -95, 0, 0, 0, 0, 0,
        // State 120
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -94, 0, 0, 0, 0, -94, 0, 0, -94, 0, 0, -94, 0, -94, 0, 0, 0, 0, 0,
        // State 121
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 122
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 137, 0, 0, 0, 0,
        // State 123
        0, 0, -93, -93, -93, -93, -93, 0, 0, -93, 0, -93, -93, -93, 0, -93, -93, -93, -93, 0, 0, 0, 0, -93, -93, 0, -93, 0, -93, -93, -93, -93, -93, 0, -93, -93, -93,
        // State 124
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 125
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0,
        // State 126
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -85, -85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -85,
        // State 127
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 128
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 129
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -83, -83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -83,
        // State 130
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -74, 0, 0, 0, 0, -74, -74, 0, -74, 0, -74, -74, -74, -74, 0, 0, -74, 0, -74,
        // State 131
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 132
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -81, -81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -81,
        // State 133
        0, 0, -92, -92, -92, -92, -92, 0, 0, -92, 0, -92, -92, -92, 0, -92, -92, -92, -92, 0, 0, 0, 0, -92, -92, 0, -92, 0, -92, -92, -92, -92, -92, 0, -92, -92, -92,
        // State 134
        0, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 135
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 156, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 136
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 0,
        // State 137
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -45, 0, 0, 0, 0, -45, 0, 0, -45, 0, 0, -45, 0, -45, 0, 0, 0, 0, 0,
        // State 138
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -46, 0, 0, 0, 0, -46, 0, 0, -46, 0, 0, -46, 0, -46, 0, 0, 0, 0, 0,
        // State 139
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -47, 0, 0, 0, 0, -47, 0, 0, -47, 0, 0, -47, 0, -47, 0, 0, 0, 0, 0,
        // State 140
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -44, 0, 0, 0, 0, -44, 0, 0, -44, 0, 0, -44, 0, -44, 0, 0, 0, 0, 0,
        // State 141
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -43, 0, 0, 0, 0, -43, 0, 0, -43, 0, 0, -43, 0, -43, 0, 0, 0, 0, 0,
        // State 142
        0, 0, 158, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 143
        0, 0, 0, 0, 0, 46, 0, 0, 0, 0, 0, 159, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 144
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -48, 0, 0, 0, 0, -48, -48, 0, -48, 0, -48, -48, -48, -48, 0, 0, -48, 0, -48,
        // State 145
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 161, 0, 0, 0,
        // State 146
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -69, 0, 0, 0, 0, -69, -69, 0, -69, 0, -69, -69, -69, -69, 0, 0, -69, 0, -69,
        // State 147
        0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 148
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 149
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -84, -84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -84,
        // State 150
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 151
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -77, -77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -77,
        // State 152
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -82, -82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -82,
        // State 153
        0, 0, 168, 0, 0, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 154
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 169, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 155
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -56, 0, 0, 0, 0, -56, -56, 0, -56, 0, -56, -56, -56, -56, 0, 0, -56, 0, -56,
        // State 156
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -50, 0, 0, 0, 0, -50, -50, 0, -50, 0, -50, -50, -50, -50, 0, 0, -50, 0, -50,
        // State 157
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 171, 0, 0, 0, 0,
        // State 158
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -49, 0, 0, 0, 0, -49, -49, 0, -49, 0, -49, -49, -49, -49, 0, 0, -49, 0, -49,
        // State 159
        0, 0, 0, 0, 0, -14, 0, 0, 0, 0, 0, -14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 160
        0, 0, 0, 0, 0, -104, 0, 0, 0, 0, 0, -104, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 161
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -67, 0, 0, 0, 0, -67, -67, 0, -67, 0, -67, -67, -67, -67, 0, 0, -67, 0, -67,
        // State 162
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0,
        // State 163
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 164
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -79, -79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -79,
        // State 165
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -78, -78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -78,
        // State 166
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 177, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 167
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 178, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 168
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -54, 0, 0, 0, 0, -54, -54, 0, -54, 0, -54, -54, -54, -54, 0, 0, -54, 0, -54,
        // State 169
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 180, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 170
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 0,
        // State 171
        0, 0, 0, 0, 0, -15, 0, 0, 0, 0, 0, -15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 172
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -68, 0, 0, 0, 0, -68, -68, 0, -68, 0, -68, -68, -68, -68, 0, 0, -68, 0, -68,
        // State 173
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -80, -80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -80,
        // State 174
        0, 0, 183, 0, 0, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 175
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 176
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -53, 0, 0, 0, 0, -53, -53, 0, -53, 0, -53, -53, -53, -53, 0, 0, -53, 0, -53,
        // State 177
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -55, 0, 0, 0, 0, -55, -55, 0, -55, 0, -55, -55, -55, -55, 0, 0, -55, 0, -55,
        // State 178
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 185, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 179
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 0,
        // State 180
        0, 0, 0, 0, 0, -105, 0, 0, 0, 0, 0, -105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 181
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -65, 0, 0, 0, 0, -65, -65, 0, -65, 0, -65, -65, -65, -65, 0, 0, -65, 0, -65,
        // State 182
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 188, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 183
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -51, 0, 0, 0, 0, -51, -51, 0, -51, 0, -51, -51, -51, -51, 0, 0, -51, 0, -51,
        // State 184
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0,
        // State 185
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 186
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -66, 0, 0, 0, 0, -66, -66, 0, -66, 0, -66, -66, -66, -66, 0, 0, -66, 0, -66,
        // State 187
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -52, 0, 0, 0, 0, -52, -52, 0, -52, 0, -52, -52, -52, -52, 0, 0, -52, 0, -52,
        // State 188
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -61, 0, 0, 0, 0, -61, -61, 0, -61, 0, -61, -61, -61, -61, 0, 0, -61, 0, -61,
        // State 189
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 194, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 190
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 0,
        // State 191
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -63, 0, 0, 0, 0, -63, -63, 0, -63, 0, -63, -63, -63, -63, 0, 0, -63, 0, -63,
        // State 192
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -62, 0, 0, 0, 0, -62, -62, 0, -62, 0, -62, -62, -62, -62, 0, 0, -62, 0, -62,
        // State 193
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 0,
        // State 194
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -64, 0, 0, 0, 0, -64, -64, 0, -64, 0, -64, -64, -64, -64, 0, 0, -64, 0, -64,
        // State 195
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -57, 0, 0, 0, 0, -57, -57, 0, -57, 0, -57, -57, -57, -57, 0, 0, -57, 0, -57,
        // State 196
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -59, 0, 0, 0, 0, -59, -59, 0, -59, 0, -59, -59, -59, -59, 0, 0, -59, 0, -59,
        // State 197
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -58, 0, 0, 0, 0, -58, -58, 0, -58, 0, -58, -58, -58, -58, 0, 0, -58, 0, -58,
        // State 198
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -60, 0, 0, 0, 0, -60, -60, 0, -60, 0, -60, -60, -60, -60, 0, 0, -60, 0, -60,
    ];
    fn __action(state: i16, integer: usize) -> i16 {
        __ACTION[(state as usize) * 37 + integer]
    }
    const __EOF_ACTION: &[i16] = &[
        // State 0
        -16,
        // State 1
        -17,
        // State 2
        0,
        // State 3
        0,
        // State 4
        0,
        // State 5
        0,
        // State 6
        0,
        // State 7
        0,
        // State 8
        0,
        // State 9
        0,
        // State 10
        0,
        // State 11
        0,
        // State 12
        0,
        // State 13
        0,
        // State 14
        0,
        // State 15
        0,
        // State 16
        0,
        // State 17
        0,
        // State 18
        0,
        // State 19
        0,
        // State 20
        0,
        // State 21
        0,
        // State 22
        0,
        // State 23
        0,
        // State 24
        0,
        // State 25
        0,
        // State 26
        0,
        // State 27
        0,
        // State 28
        0,
        // State 29
        0,
        // State 30
        0,
        // State 31
        0,
        // State 32
        0,
        // State 33
        0,
        // State 34
        0,
        // State 35
        0,
        // State 36
        0,
        // State 37
        0,
        // State 38
        0,
        // State 39
        0,
        // State 40
        0,
        // State 41
        0,
        // State 42
        0,
        // State 43
        0,
        // State 44
        0,
        // State 45
        0,
        // State 46
        0,
        // State 47
        0,
        // State 48
        0,
        // State 49
        0,
        // State 50
        0,
        // State 51
        0,
        // State 52
        0,
        // State 53
        0,
        // State 54
        0,
        // State 55
        0,
        // State 56
        0,
        // State 57
        0,
        // State 58
        0,
        // State 59
        0,
        // State 60
        0,
        // State 61
        0,
        // State 62
        0,
        // State 63
        0,
        // State 64
        0,
        // State 65
        -18,
        // State 66
        -27,
        // State 67
        0,
        // State 68
        -28,
        // State 69
        0,
        // State 70
        0,
        // State 71
        0,
        // State 72
        0,
        // State 73
        0,
        // State 74
        0,
        // State 75
        0,
        // State 76
        0,
        // State 77
        0,
        // State 78
        0,
        // State 79
        0,
        // State 80
        -21,
        // State 81
        0,
        // State 82
        -22,
        // State 83
        0,
        // State 84
        0,
        // State 85
        -23,
        // State 86
        0,
        // State 87
        0,
        // State 88
        0,
        // State 89
        -24,
        // State 90
        0,
        // State 91
        0,
        // State 92
        0,
        // State 93
        0,
        // State 94
        0,
        // State 95
        0,
        // State 96
        0,
        // State 97
        0,
        // State 98
        0,
        // State 99
        0,
        // State 100
        0,
        // State 101
        0,
        // State 102
        0,
        // State 103
        0,
        // State 104
        0,
        // State 105
        0,
        // State 106
        0,
        // State 107
        0,
        // State 108
        0,
        // State 109
        0,
        // State 110
        0,
        // State 111
        0,
        // State 112
        0,
        // State 113
        0,
        // State 114
        0,
        // State 115
        0,
        // State 116
        0,
        // State 117
        0,
        // State 118
        0,
        // State 119
        0,
        // State 120
        0,
        // State 121
        0,
        // State 122
        0,
        // State 123
        0,
        // State 124
        0,
        // State 125
        0,
        // State 126
        0,
        // State 127
        0,
        // State 128
        0,
        // State 129
        0,
        // State 130
        0,
        // State 131
        0,
        // State 132
        0,
        // State 133
        0,
        // State 134
        0,
        // State 135
        0,
        // State 136
        0,
        // State 137
        0,
        // State 138
        0,
        // State 139
        0,
        // State 140
        0,
        // State 141
        0,
        // State 142
        0,
        // State 143
        0,
        // State 144
        0,
        // State 145
        0,
        // State 146
        0,
        // State 147
        0,
        // State 148
        0,
        // State 149
        0,
        // State 150
        0,
        // State 151
        0,
        // State 152
        0,
        // State 153
        0,
        // State 154
        0,
        // State 155
        0,
        // State 156
        0,
        // State 157
        0,
        // State 158
        0,
        // State 159
        0,
        // State 160
        0,
        // State 161
        0,
        // State 162
        0,
        // State 163
        0,
        // State 164
        0,
        // State 165
        0,
        // State 166
        0,
        // State 167
        0,
        // State 168
        0,
        // State 169
        0,
        // State 170
        0,
        // State 171
        0,
        // State 172
        0,
        // State 173
        0,
        // State 174
        0,
        // State 175
        0,
        // State 176
        0,
        // State 177
        0,
        // State 178
        0,
        // State 179
        0,
        // State 180
        0,
        // State 181
        0,
        // State 182
        0,
        // State 183
        0,
        // State 184
        0,
        // State 185
        0,
        // State 186
        0,
        // State 187
        0,
        // State 188
        0,
        // State 189
        0,
        // State 190
        0,
        // State 191
        0,
        // State 192
        0,
        // State 193
        0,
        // State 194
        0,
        // State 195
        0,
        // State 196
        0,
        // State 197
        0,
        // State 198
        0,
    ];
    fn __goto(state: i16, nt: usize) -> i16 {
        match nt {
            2 => match state {
                47 => 174,
                _ => 153,
            },
            5 => 90,
            8 => 143,
            9 => 65,
            11 => 23,
            12 => match state {
                1 => 68,
                _ => 66,
            },
            14 => 1,
            20 => match state {
                19 => 125,
                28 => 142,
                31 => 147,
                _ => 122,
            },
            21 => 37,
            22 => match state {
                11 => 13,
                12 => 21,
                20 => 32,
                22 | 33 | 40 | 46 | 50 | 55 | 57 | 59..=60 | 63..=64 => 130,
                _ => 115,
            },
            24 => match state {
                21 => 33,
                32 => 40,
                39 => 46,
                43 => 50,
                52 => 55,
                54 => 57,
                56 => 59,
                58 => 60,
                61 => 63,
                62 => 64,
                _ => 22,
            },
            25 => match state {
                3 | 5 => 76,
                _ => 72,
            },
            27 => match state {
                4 => 5,
                _ => 3,
            },
            28 => match state {
                16 | 19 | 28 | 31 => 27,
                18 => 30,
                25 => 35,
                26 => 36,
                37 => 44,
                41 => 47,
                42 => 49,
                48 => 53,
                _ => 14,
            },
            29 => match state {
                23 => 34,
                _ => 15,
            },
            30 => 24,
            31 => match state {
                9 => 102,
                10 => 108,
                _ => 7,
            },
            33 => match state {
                8 => 94,
                16 | 18..=19 | 23 | 25..=26 | 28 | 31 | 37 | 41..=42 | 48 => 123,
                24 => 133,
                51 => 180,
                _ => 111,
            },
            34 => match state {
                38 => 159,
                45 => 171,
                _ => 29,
            },
            _ => 0,
        }
    }
    fn __expected_tokens(__state: i16) -> alloc::vec::Vec<alloc::string::String> {
        const __TERMINAL: &[&str] = &[
            r###""!""###,
            r###""(""###,
            r###"")""###,
            r###""*""###,
            r###""+""###,
            r###"",""###,
            r###""-""###,
            r###""->""###,
            r###"".""###,
            r###""/""###,
            r###"":""###,
            r###"";""###,
            r###""<""###,
            r###""<=""###,
            r###""=""###,
            r###""==""###,
            r###""=>""###,
            r###"">""###,
            r###""BOOL""###,
            r###""CLASS""###,
            r###""ELSE""###,
            r###""ERROR""###,
            r###""FUN""###,
            r###""ID""###,
            r###""IF""###,
            r###""INHERITS""###,
            r###""INT""###,
            r###""ISVOID""###,
            r###""LET""###,
            r###""NEW""###,
            r###""RETURN""###,
            r###""STR""###,
            r###""THEN""###,
            r###""TYPE""###,
            r###""WHILE""###,
            r###""{""###,
            r###""}""###,
        ];
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(alloc::string::ToString::to_string(terminal))
            }
        }).collect()
    }
    pub(crate) struct __StateMachine<'input>
    where 
    {
        __phantom: core::marker::PhantomData<(&'input ())>,
    }
    impl<'input> __state_machine::ParserDefinition for __StateMachine<'input>
    where 
    {
        type Location = LineNum;
        type Error = LexicalError;
        type Token = Token;
        type TokenIndex = usize;
        type Symbol = __Symbol<>;
        type Success = alloc::vec::Vec<Class>;
        type StateIndex = i16;
        type Action = i16;
        type ReduceIndex = i16;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, core::marker::PhantomData::<(&())>)
        }

        #[inline]
        fn action(&self, state: i16, integer: usize) -> i16 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i16) -> i16 {
            __action(state, 37 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i16) -> i16 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i16, nt: usize) -> i16 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, core::marker::PhantomData::<(&())>)
        }

        fn expected_tokens(&self, state: i16) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens(state)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i16,
            start_location: Option<&Self::Location>,
            states: &mut alloc::vec::Vec<i16>,
            symbols: &mut alloc::vec::Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                action,
                start_location,
                states,
                symbols,
                core::marker::PhantomData::<(&())>,
            )
        }

        fn simulate_reduce(&self, action: i16) -> __state_machine::SimulatedReduce<Self> {
            panic!("error recovery not enabled for this grammar")
        }
    }
    fn __token_to_integer<
        'input,
    >(
        __token: &Token,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> Option<usize>
    {
        match *__token {
            Token::Not if true => Some(0),
            Token::Lparen if true => Some(1),
            Token::Rparen if true => Some(2),
            Token::Mul if true => Some(3),
            Token::Plus if true => Some(4),
            Token::Comma if true => Some(5),
            Token::Minus if true => Some(6),
            Token::Arrow if true => Some(7),
            Token::Period if true => Some(8),
            Token::Divide if true => Some(9),
            Token::Colon if true => Some(10),
            Token::Semicolon if true => Some(11),
            Token::Less if true => Some(12),
            Token::LessE if true => Some(13),
            Token::Assign(_) if true => Some(14),
            Token::Equal if true => Some(15),
            Token::MoreE if true => Some(16),
            Token::More if true => Some(17),
            Token::BoolConst(_) if true => Some(18),
            Token::Class_(_, _) if true => Some(19),
            Token::Else(_) if true => Some(20),
            Token::Error(_) if true => Some(21),
            Token::Function(_) if true => Some(22),
            Token::Identifier(_, _) if true => Some(23),
            Token::If(_) if true => Some(24),
            Token::Inherits if true => Some(25),
            Token::IntConst(_) if true => Some(26),
            Token::Isvoid if true => Some(27),
            Token::Let(_) if true => Some(28),
            Token::New(_) if true => Some(29),
            Token::Return(_) if true => Some(30),
            Token::StringConst(_) if true => Some(31),
            Token::Then if true => Some(32),
            Token::TypeId(_) if true => Some(33),
            Token::While(_) if true => Some(34),
            Token::Lbrace if true => Some(35),
            Token::Rbrace if true => Some(36),
            _ => None,
        }
    }
    fn __token_to_symbol<
        'input,
    >(
        __token_index: usize,
        __token: Token,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> __Symbol<>
    {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 15 | 16 | 17 | 25 | 27 | 32 | 35 | 36 => __Symbol::Variant0(__token),
            14 | 20 | 22 | 24 | 28 | 29 | 30 | 34 => match __token {
                Token::Assign(__tok0) | Token::Else(__tok0) | Token::Function(__tok0) | Token::If(__tok0) | Token::Let(__tok0) | Token::New(__tok0) | Token::Return(__tok0) | Token::While(__tok0) if true => __Symbol::Variant1(__tok0),
                _ => unreachable!(),
            },
            18 => match __token {
                Token::BoolConst(__tok0) if true => __Symbol::Variant2(__tok0),
                _ => unreachable!(),
            },
            19 => match __token {
                Token::Class_(__tok0, __tok1) if true => __Symbol::Variant3((__tok0, __tok1)),
                _ => unreachable!(),
            },
            21 | 26 | 31 | 33 => match __token {
                Token::Error(__tok0) | Token::IntConst(__tok0) | Token::StringConst(__tok0) | Token::TypeId(__tok0) if true => __Symbol::Variant4(__tok0),
                _ => unreachable!(),
            },
            23 => match __token {
                Token::Identifier(__tok0, __tok1) if true => __Symbol::Variant5((__tok0, __tok1)),
                _ => unreachable!(),
            },
            _ => unreachable!(),
        }
    }
    pub struct ProgramParser {
        _priv: (),
    }

    impl ProgramParser {
        pub fn new() -> ProgramParser {
            ProgramParser {
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            'input,
            __TOKEN: __ToTriple<'input, >,
            __TOKENS: IntoIterator<Item=__TOKEN>,
        >(
            &self,
            __tokens0: __TOKENS,
        ) -> Result<alloc::vec::Vec<Class>, __lalrpop_util::ParseError<LineNum, Token, LexicalError>>
        {
            let __tokens = __tokens0.into_iter();
            let mut __tokens = __tokens.map(|t| __ToTriple::to_triple(t));
            __state_machine::Parser::drive(
                __StateMachine {
                    __phantom: core::marker::PhantomData::<(&())>,
                },
                __tokens,
            )
        }
    }
    pub(crate) fn __reduce<
        'input,
    >(
        __action: i16,
        __lookahead_start: Option<&LineNum>,
        __states: &mut alloc::vec::Vec<i16>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> Option<Result<alloc::vec::Vec<Class>,__lalrpop_util::ParseError<LineNum, Token, LexicalError>>>
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1 => {
                __reduce1(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            2 => {
                __reduce2(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            3 => {
                __reduce3(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            4 => {
                __reduce4(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            5 => {
                __reduce5(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            6 => {
                __reduce6(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            7 => {
                __reduce7(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            8 => {
                __reduce8(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            9 => {
                __reduce9(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            10 => {
                __reduce10(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            11 => {
                __reduce11(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            12 => {
                __reduce12(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            13 => {
                __reduce13(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            14 => {
                __reduce14(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            15 => {
                __reduce15(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            16 => {
                __reduce16(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            17 => {
                // __Program = Program => ActionFn(0);
                let __sym0 = __pop_Variant12(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action0::<>(__sym0);
                return Some(Ok(__nt));
            }
            18 => {
                __reduce18(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            19 => {
                __reduce19(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            20 => {
                __reduce20(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            21 => {
                __reduce21(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            22 => {
                __reduce22(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            23 => {
                __reduce23(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            24 => {
                __reduce24(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            25 => {
                __reduce25(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            26 => {
                __reduce26(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            27 => {
                __reduce27(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            28 => {
                __reduce28(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            29 => {
                __reduce29(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            30 => {
                __reduce30(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            31 => {
                __reduce31(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            32 => {
                __reduce32(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            33 => {
                __reduce33(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            34 => {
                __reduce34(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            35 => {
                __reduce35(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            36 => {
                __reduce36(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            37 => {
                __reduce37(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            38 => {
                __reduce38(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            39 => {
                __reduce39(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            40 => {
                __reduce40(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            41 => {
                __reduce41(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            42 => {
                __reduce42(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            43 => {
                __reduce43(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            44 => {
                __reduce44(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            45 => {
                __reduce45(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            46 => {
                __reduce46(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            47 => {
                __reduce47(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            48 => {
                __reduce48(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            49 => {
                __reduce49(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            50 => {
                __reduce50(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            51 => {
                __reduce51(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            52 => {
                __reduce52(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            53 => {
                __reduce53(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            54 => {
                __reduce54(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            55 => {
                __reduce55(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            56 => {
                __reduce56(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            57 => {
                __reduce57(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            58 => {
                __reduce58(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            59 => {
                __reduce59(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            60 => {
                __reduce60(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            61 => {
                __reduce61(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            62 => {
                __reduce62(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            63 => {
                __reduce63(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            64 => {
                __reduce64(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            65 => {
                __reduce65(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            66 => {
                __reduce66(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            67 => {
                __reduce67(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            68 => {
                __reduce68(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            69 => {
                __reduce69(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            70 => {
                __reduce70(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            71 => {
                __reduce71(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            72 => {
                __reduce72(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            73 => {
                __reduce73(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            74 => {
                __reduce74(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            75 => {
                __reduce75(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            76 => {
                __reduce76(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            77 => {
                __reduce77(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            78 => {
                __reduce78(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            79 => {
                __reduce79(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            80 => {
                __reduce80(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            81 => {
                __reduce81(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            82 => {
                __reduce82(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            83 => {
                __reduce83(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            84 => {
                __reduce84(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            85 => {
                __reduce85(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            86 => {
                __reduce86(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            87 => {
                __reduce87(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            88 => {
                __reduce88(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            89 => {
                __reduce89(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            90 => {
                __reduce90(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            91 => {
                __reduce91(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            92 => {
                __reduce92(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            93 => {
                __reduce93(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            94 => {
                __reduce94(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            95 => {
                __reduce95(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            96 => {
                __reduce96(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            97 => {
                __reduce97(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            98 => {
                __reduce98(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            99 => {
                __reduce99(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            100 => {
                __reduce100(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            101 => {
                __reduce101(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            102 => {
                __reduce102(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            103 => {
                __reduce103(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            104 => {
                __reduce104(__lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant3<
    >(
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>
    ) -> (LineNum, ((usize, usize), String), LineNum)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant3(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
    >(
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>
    ) -> (LineNum, (String, (usize, usize)), LineNum)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant5(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
    >(
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>
    ) -> (LineNum, (Token, Expr), LineNum)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant6(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant8<
    >(
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>
    ) -> (LineNum, (Token, ParamDecl), LineNum)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant8(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant10<
    >(
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>
    ) -> (LineNum, (Token, VarDecl), LineNum)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant10(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
    >(
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>
    ) -> (LineNum, (usize, usize), LineNum)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant1(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant14<
    >(
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>
    ) -> (LineNum, Class, LineNum)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant14(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant20<
    >(
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>
    ) -> (LineNum, Expr, LineNum)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant20(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant22<
    >(
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>
    ) -> (LineNum, Feature, LineNum)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant22(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant13<
    >(
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>
    ) -> (LineNum, MathOp, LineNum)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant13(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant24<
    >(
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>
    ) -> (LineNum, ParamDecl, LineNum)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant24(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant4<
    >(
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>
    ) -> (LineNum, String, LineNum)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant4(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
    >(
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>
    ) -> (LineNum, Token, LineNum)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant0(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant25<
    >(
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>
    ) -> (LineNum, VarDecl, LineNum)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant25(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant15<
    >(
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>
    ) -> (LineNum, Vec<Expr>, LineNum)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant15(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant17<
    >(
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>
    ) -> (LineNum, Vec<ParamDecl>, LineNum)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant17(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant19<
    >(
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>
    ) -> (LineNum, Vec<VarDecl>, LineNum)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant19(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
    >(
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>
    ) -> (LineNum, alloc::vec::Vec<(Token, Expr)>, LineNum)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant7(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant9<
    >(
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>
    ) -> (LineNum, alloc::vec::Vec<(Token, ParamDecl)>, LineNum)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant9(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant11<
    >(
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>
    ) -> (LineNum, alloc::vec::Vec<(Token, VarDecl)>, LineNum)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant11(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant12<
    >(
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>
    ) -> (LineNum, alloc::vec::Vec<Class>, LineNum)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant12(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant21<
    >(
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>
    ) -> (LineNum, alloc::vec::Vec<Expr>, LineNum)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant21(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant23<
    >(
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>
    ) -> (LineNum, alloc::vec::Vec<Feature>, LineNum)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant23(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
    >(
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>
    ) -> (LineNum, bool, LineNum)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant2(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant16<
    >(
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>
    ) -> (LineNum, core::option::Option<Vec<Expr>>, LineNum)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant16(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant18<
    >(
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>
    ) -> (LineNum, core::option::Option<Vec<ParamDecl>>, LineNum)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant18(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    pub(crate) fn __reduce0<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," math_expr) = ",", math_expr => ActionFn(67);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant20(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action67::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 0)
    }
    pub(crate) fn __reduce1<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," math_expr)* =  => ActionFn(65);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action65::<>(&__start, &__end);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (0, 1)
    }
    pub(crate) fn __reduce2<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," math_expr)* = ("," math_expr)+ => ActionFn(66);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action66::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 1)
    }
    pub(crate) fn __reduce3<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," math_expr)+ = ",", math_expr => ActionFn(76);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant20(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action76::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce4<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," math_expr)+ = ("," math_expr)+, ",", math_expr => ActionFn(77);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant20(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action77::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 2)
    }
    pub(crate) fn __reduce5<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," param) = ",", param => ActionFn(61);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant24(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action61::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 3)
    }
    pub(crate) fn __reduce6<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," param)* =  => ActionFn(59);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action59::<>(&__start, &__end);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (0, 4)
    }
    pub(crate) fn __reduce7<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," param)* = ("," param)+ => ActionFn(60);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action60::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 4)
    }
    pub(crate) fn __reduce8<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," param)+ = ",", param => ActionFn(80);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant24(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action80::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (2, 5)
    }
    pub(crate) fn __reduce9<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," param)+ = ("," param)+, ",", param => ActionFn(81);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant24(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action81::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (3, 5)
    }
    pub(crate) fn __reduce10<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," var) = ",", var => ActionFn(64);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant25(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action64::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (2, 6)
    }
    pub(crate) fn __reduce11<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," var)* =  => ActionFn(62);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action62::<>(&__start, &__end);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (0, 7)
    }
    pub(crate) fn __reduce12<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," var)* = ("," var)+ => ActionFn(63);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action63::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 7)
    }
    pub(crate) fn __reduce13<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," var)+ = ",", var => ActionFn(84);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant25(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action84::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (2, 8)
    }
    pub(crate) fn __reduce14<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("," var)+ = ("," var)+, ",", var => ActionFn(85);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant25(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action85::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (3, 8)
    }
    pub(crate) fn __reduce15<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Program =  => ActionFn(88);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action88::<>(&__start, &__end);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (0, 9)
    }
    pub(crate) fn __reduce16<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Program = class+ => ActionFn(89);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action89::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce18<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // add_minus = "+" => ActionFn(26);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action26::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce19<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // add_minus = "-" => ActionFn(27);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action27::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce20<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // class = "CLASS", "TYPE", "{", "}", ";" => ActionFn(122);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action122::<>(__sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (5, 12)
    }
    pub(crate) fn __reduce21<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // class = "CLASS", "TYPE", "{", feature+, "}", ";" => ActionFn(123);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant23(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action123::<>(__sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (6, 12)
    }
    pub(crate) fn __reduce22<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // class = "CLASS", "TYPE", "INHERITS", "TYPE", "{", "}", ";" => ActionFn(124);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant4(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action124::<>(__sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (7, 12)
    }
    pub(crate) fn __reduce23<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // class = "CLASS", "TYPE", "INHERITS", "TYPE", "{", feature+, "}", ";" => ActionFn(125);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant23(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant4(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym7.2.clone();
        let __nt = super::__action125::<>(__sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (8, 12)
    }
    pub(crate) fn __reduce24<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // class* =  => ActionFn(53);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action53::<>(&__start, &__end);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (0, 13)
    }
    pub(crate) fn __reduce25<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // class* = class+ => ActionFn(54);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action54::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 13)
    }
    pub(crate) fn __reduce26<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // class+ = class => ActionFn(55);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action55::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 14)
    }
    pub(crate) fn __reduce27<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // class+ = class+, class => ActionFn(56);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant14(__symbols);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action56::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (2, 14)
    }
    pub(crate) fn __reduce28<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // comma_list<math_expr> = math_expr => ActionFn(78);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action78::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 15)
    }
    pub(crate) fn __reduce29<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // comma_list<math_expr> = math_expr, ("," math_expr)+ => ActionFn(79);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action79::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (2, 15)
    }
    pub(crate) fn __reduce30<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // comma_list<math_expr>? = math_expr => ActionFn(90);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action90::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 16)
    }
    pub(crate) fn __reduce31<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // comma_list<math_expr>? = math_expr, ("," math_expr)+ => ActionFn(91);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action91::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce32<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // comma_list<math_expr>? =  => ActionFn(44);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action44::<>(&__start, &__end);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (0, 16)
    }
    pub(crate) fn __reduce33<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // comma_list<param> = param => ActionFn(82);
        let __sym0 = __pop_Variant24(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action82::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 17)
    }
    pub(crate) fn __reduce34<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // comma_list<param> = param, ("," param)+ => ActionFn(83);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant9(__symbols);
        let __sym0 = __pop_Variant24(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action83::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (2, 17)
    }
    pub(crate) fn __reduce35<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // comma_list<param>? = param => ActionFn(98);
        let __sym0 = __pop_Variant24(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action98::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce36<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // comma_list<param>? = param, ("," param)+ => ActionFn(99);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant9(__symbols);
        let __sym0 = __pop_Variant24(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action99::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (2, 18)
    }
    pub(crate) fn __reduce37<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // comma_list<param>? =  => ActionFn(49);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action49::<>(&__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 18)
    }
    pub(crate) fn __reduce38<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // comma_list<var> = var => ActionFn(86);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action86::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 19)
    }
    pub(crate) fn __reduce39<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // comma_list<var> = var, ("," var)+ => ActionFn(87);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action87::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (2, 19)
    }
    pub(crate) fn __reduce40<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // cond_expr = math_expr, cond_op, math_expr => ActionFn(39);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant20(__symbols);
        let __sym1 = __pop_Variant13(__symbols);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action39::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (3, 20)
    }
    pub(crate) fn __reduce41<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // cond_expr = math_expr => ActionFn(40);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action40::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 20)
    }
    pub(crate) fn __reduce42<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // cond_op = ">" => ActionFn(30);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action30::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 21)
    }
    pub(crate) fn __reduce43<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // cond_op = "=>" => ActionFn(31);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action31::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 21)
    }
    pub(crate) fn __reduce44<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // cond_op = "<" => ActionFn(32);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action32::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 21)
    }
    pub(crate) fn __reduce45<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // cond_op = "<=" => ActionFn(33);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action33::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 21)
    }
    pub(crate) fn __reduce46<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // cond_op = "==" => ActionFn(34);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action34::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 21)
    }
    pub(crate) fn __reduce47<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // expr = "LET", var, ";" => ActionFn(106);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant25(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action106::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (3, 22)
    }
    pub(crate) fn __reduce48<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // expr = "LET", var, ("," var)+, ";" => ActionFn(107);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant25(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action107::<>(__sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (4, 22)
    }
    pub(crate) fn __reduce49<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // expr = "ID", "=", math_expr, ";" => ActionFn(12);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant20(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action12::<>(__sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (4, 22)
    }
    pub(crate) fn __reduce50<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // expr = single_expr, ".", "ID", "(", math_expr, ")", ";" => ActionFn(92);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant20(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant5(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action92::<>(__sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (7, 22)
    }
    pub(crate) fn __reduce51<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // expr = single_expr, ".", "ID", "(", math_expr, ("," math_expr)+, ")", ";" => ActionFn(93);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant7(__symbols);
        let __sym4 = __pop_Variant20(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant5(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym7.2.clone();
        let __nt = super::__action93::<>(__sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (8, 22)
    }
    pub(crate) fn __reduce52<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // expr = single_expr, ".", "ID", "(", ")", ";" => ActionFn(94);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant5(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action94::<>(__sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (6, 22)
    }
    pub(crate) fn __reduce53<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // expr = "ID", "(", math_expr, ")", ";" => ActionFn(95);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant20(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action95::<>(__sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (5, 22)
    }
    pub(crate) fn __reduce54<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // expr = "ID", "(", math_expr, ("," math_expr)+, ")", ";" => ActionFn(96);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant7(__symbols);
        let __sym2 = __pop_Variant20(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action96::<>(__sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (6, 22)
    }
    pub(crate) fn __reduce55<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // expr = "ID", "(", ")", ";" => ActionFn(97);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action97::<>(__sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (4, 22)
    }
    pub(crate) fn __reduce56<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // expr = "IF", "(", cond_expr, ")", "THEN", "{", "}", "ELSE", "{", "}" => ActionFn(108);
        assert!(__symbols.len() >= 10);
        let __sym9 = __pop_Variant0(__symbols);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant1(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant20(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym9.2.clone();
        let __nt = super::__action108::<>(__sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (10, 22)
    }
    pub(crate) fn __reduce57<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // expr = "IF", "(", cond_expr, ")", "THEN", "{", "}", "ELSE", "{", expr+, "}" => ActionFn(109);
        assert!(__symbols.len() >= 11);
        let __sym10 = __pop_Variant0(__symbols);
        let __sym9 = __pop_Variant21(__symbols);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant1(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant20(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym10.2.clone();
        let __nt = super::__action109::<>(__sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9, __sym10);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (11, 22)
    }
    pub(crate) fn __reduce58<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // expr = "IF", "(", cond_expr, ")", "THEN", "{", expr+, "}", "ELSE", "{", "}" => ActionFn(110);
        assert!(__symbols.len() >= 11);
        let __sym10 = __pop_Variant0(__symbols);
        let __sym9 = __pop_Variant0(__symbols);
        let __sym8 = __pop_Variant1(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant21(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant20(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym10.2.clone();
        let __nt = super::__action110::<>(__sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9, __sym10);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (11, 22)
    }
    pub(crate) fn __reduce59<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // expr = "IF", "(", cond_expr, ")", "THEN", "{", expr+, "}", "ELSE", "{", expr+, "}" => ActionFn(111);
        assert!(__symbols.len() >= 12);
        let __sym11 = __pop_Variant0(__symbols);
        let __sym10 = __pop_Variant21(__symbols);
        let __sym9 = __pop_Variant0(__symbols);
        let __sym8 = __pop_Variant1(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant21(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant20(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym11.2.clone();
        let __nt = super::__action111::<>(__sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9, __sym10, __sym11);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (12, 22)
    }
    pub(crate) fn __reduce60<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // expr = "IF", cond_expr, "THEN", "{", "}", "ELSE", "{", "}" => ActionFn(112);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant1(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant20(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym7.2.clone();
        let __nt = super::__action112::<>(__sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (8, 22)
    }
    pub(crate) fn __reduce61<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // expr = "IF", cond_expr, "THEN", "{", "}", "ELSE", "{", expr+, "}" => ActionFn(113);
        assert!(__symbols.len() >= 9);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant21(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant1(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant20(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym8.2.clone();
        let __nt = super::__action113::<>(__sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (9, 22)
    }
    pub(crate) fn __reduce62<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // expr = "IF", cond_expr, "THEN", "{", expr+, "}", "ELSE", "{", "}" => ActionFn(114);
        assert!(__symbols.len() >= 9);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant1(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant21(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant20(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym8.2.clone();
        let __nt = super::__action114::<>(__sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (9, 22)
    }
    pub(crate) fn __reduce63<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // expr = "IF", cond_expr, "THEN", "{", expr+, "}", "ELSE", "{", expr+, "}" => ActionFn(115);
        assert!(__symbols.len() >= 10);
        let __sym9 = __pop_Variant0(__symbols);
        let __sym8 = __pop_Variant21(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant1(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant21(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant20(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym9.2.clone();
        let __nt = super::__action115::<>(__sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (10, 22)
    }
    pub(crate) fn __reduce64<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // expr = "WHILE", "(", cond_expr, ")", "{", "}" => ActionFn(116);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant20(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action116::<>(__sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (6, 22)
    }
    pub(crate) fn __reduce65<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // expr = "WHILE", "(", cond_expr, ")", "{", expr+, "}" => ActionFn(117);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant21(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant20(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action117::<>(__sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (7, 22)
    }
    pub(crate) fn __reduce66<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // expr = "WHILE", cond_expr, "{", "}" => ActionFn(118);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant20(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action118::<>(__sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (4, 22)
    }
    pub(crate) fn __reduce67<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // expr = "WHILE", cond_expr, "{", expr+, "}" => ActionFn(119);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant21(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant20(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action119::<>(__sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (5, 22)
    }
    pub(crate) fn __reduce68<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // expr = "RETURN", math_expr, ";" => ActionFn(19);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant20(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action19::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (3, 22)
    }
    pub(crate) fn __reduce69<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // expr = math_expr => ActionFn(20);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action20::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce70<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // expr* =  => ActionFn(41);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action41::<>(&__start, &__end);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (0, 23)
    }
    pub(crate) fn __reduce71<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // expr* = expr+ => ActionFn(42);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action42::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 23)
    }
    pub(crate) fn __reduce72<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // expr+ = expr => ActionFn(68);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action68::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce73<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // expr+ = expr+, expr => ActionFn(69);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant20(__symbols);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action69::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (2, 24)
    }
    pub(crate) fn __reduce74<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // feature = "ID", ":", "TYPE", ";" => ActionFn(4);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant4(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action4::<>(__sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (4, 25)
    }
    pub(crate) fn __reduce75<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // feature = "ID", ":", "TYPE", "=", single_expr, ";" => ActionFn(5);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant20(__symbols);
        let __sym3 = __pop_Variant1(__symbols);
        let __sym2 = __pop_Variant4(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action5::<>(__sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (6, 25)
    }
    pub(crate) fn __reduce76<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // feature = "FUN", "ID", "(", param, ")", "->", "TYPE", "{", expr, "}", ";" => ActionFn(126);
        assert!(__symbols.len() >= 11);
        let __sym10 = __pop_Variant0(__symbols);
        let __sym9 = __pop_Variant0(__symbols);
        let __sym8 = __pop_Variant20(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant4(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant24(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant5(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym10.2.clone();
        let __nt = super::__action126::<>(__sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9, __sym10);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (11, 25)
    }
    pub(crate) fn __reduce77<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // feature = "FUN", "ID", "(", param, ")", "->", "TYPE", "{", expr, expr+, "}", ";" => ActionFn(127);
        assert!(__symbols.len() >= 12);
        let __sym11 = __pop_Variant0(__symbols);
        let __sym10 = __pop_Variant0(__symbols);
        let __sym9 = __pop_Variant21(__symbols);
        let __sym8 = __pop_Variant20(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant4(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant24(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant5(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym11.2.clone();
        let __nt = super::__action127::<>(__sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9, __sym10, __sym11);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (12, 25)
    }
    pub(crate) fn __reduce78<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // feature = "FUN", "ID", "(", param, ("," param)+, ")", "->", "TYPE", "{", expr, "}", ";" => ActionFn(128);
        assert!(__symbols.len() >= 12);
        let __sym11 = __pop_Variant0(__symbols);
        let __sym10 = __pop_Variant0(__symbols);
        let __sym9 = __pop_Variant20(__symbols);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant4(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant9(__symbols);
        let __sym3 = __pop_Variant24(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant5(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym11.2.clone();
        let __nt = super::__action128::<>(__sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9, __sym10, __sym11);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (12, 25)
    }
    pub(crate) fn __reduce79<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // feature = "FUN", "ID", "(", param, ("," param)+, ")", "->", "TYPE", "{", expr, expr+, "}", ";" => ActionFn(129);
        assert!(__symbols.len() >= 13);
        let __sym12 = __pop_Variant0(__symbols);
        let __sym11 = __pop_Variant0(__symbols);
        let __sym10 = __pop_Variant21(__symbols);
        let __sym9 = __pop_Variant20(__symbols);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant4(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant9(__symbols);
        let __sym3 = __pop_Variant24(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant5(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym12.2.clone();
        let __nt = super::__action129::<>(__sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9, __sym10, __sym11, __sym12);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (13, 25)
    }
    pub(crate) fn __reduce80<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // feature = "FUN", "ID", "(", ")", "->", "TYPE", "{", expr, "}", ";" => ActionFn(130);
        assert!(__symbols.len() >= 10);
        let __sym9 = __pop_Variant0(__symbols);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant20(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant4(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant5(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym9.2.clone();
        let __nt = super::__action130::<>(__sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (10, 25)
    }
    pub(crate) fn __reduce81<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // feature = "FUN", "ID", "(", ")", "->", "TYPE", "{", expr, expr+, "}", ";" => ActionFn(131);
        assert!(__symbols.len() >= 11);
        let __sym10 = __pop_Variant0(__symbols);
        let __sym9 = __pop_Variant0(__symbols);
        let __sym8 = __pop_Variant21(__symbols);
        let __sym7 = __pop_Variant20(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant4(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant5(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym10.2.clone();
        let __nt = super::__action131::<>(__sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9, __sym10);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (11, 25)
    }
    pub(crate) fn __reduce82<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // feature = "FUN", "ID", "(", param, ")", "->", "TYPE", "{", "}", ";" => ActionFn(103);
        assert!(__symbols.len() >= 10);
        let __sym9 = __pop_Variant0(__symbols);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant4(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant24(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant5(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym9.2.clone();
        let __nt = super::__action103::<>(__sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (10, 25)
    }
    pub(crate) fn __reduce83<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // feature = "FUN", "ID", "(", param, ("," param)+, ")", "->", "TYPE", "{", "}", ";" => ActionFn(104);
        assert!(__symbols.len() >= 11);
        let __sym10 = __pop_Variant0(__symbols);
        let __sym9 = __pop_Variant0(__symbols);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant4(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant9(__symbols);
        let __sym3 = __pop_Variant24(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant5(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym10.2.clone();
        let __nt = super::__action104::<>(__sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9, __sym10);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (11, 25)
    }
    pub(crate) fn __reduce84<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // feature = "FUN", "ID", "(", ")", "->", "TYPE", "{", "}", ";" => ActionFn(105);
        assert!(__symbols.len() >= 9);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant4(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant5(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym8.2.clone();
        let __nt = super::__action105::<>(__sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (9, 25)
    }
    pub(crate) fn __reduce85<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // feature* =  => ActionFn(51);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action51::<>(&__start, &__end);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (0, 26)
    }
    pub(crate) fn __reduce86<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // feature* = feature+ => ActionFn(52);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action52::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce87<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // feature+ = feature => ActionFn(57);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action57::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce88<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // feature+ = feature+, feature => ActionFn(58);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant22(__symbols);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action58::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (2, 27)
    }
    pub(crate) fn __reduce89<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // math_expr = math_expr, add_minus, math_term => ActionFn(37);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant20(__symbols);
        let __sym1 = __pop_Variant13(__symbols);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action37::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (3, 28)
    }
    pub(crate) fn __reduce90<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // math_expr = math_term => ActionFn(38);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action38::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce91<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // math_term = math_term, mul_div, single_expr => ActionFn(35);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant20(__symbols);
        let __sym1 = __pop_Variant13(__symbols);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action35::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce92<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // math_term = single_expr => ActionFn(36);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action36::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce93<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // mul_div = "/" => ActionFn(28);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action28::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce94<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // mul_div = "*" => ActionFn(29);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action29::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce95<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // param = "ID", ":", "TYPE" => ActionFn(8);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant4(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action8::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (3, 31)
    }
    pub(crate) fn __reduce96<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // semi_list<expr> = expr => ActionFn(120);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action120::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 32)
    }
    pub(crate) fn __reduce97<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // semi_list<expr> = expr, expr+ => ActionFn(121);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant21(__symbols);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action121::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce98<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // single_expr = "ID" => ActionFn(21);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action21::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 33)
    }
    pub(crate) fn __reduce99<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // single_expr = "STR" => ActionFn(22);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action22::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 33)
    }
    pub(crate) fn __reduce100<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // single_expr = "BOOL" => ActionFn(23);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action23::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 33)
    }
    pub(crate) fn __reduce101<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // single_expr = "INT" => ActionFn(24);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action24::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 33)
    }
    pub(crate) fn __reduce102<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // single_expr = "NEW", "TYPE" => ActionFn(25);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action25::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (2, 33)
    }
    pub(crate) fn __reduce103<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // var = "ID", ":", "TYPE" => ActionFn(9);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant4(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action9::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (3, 34)
    }
    pub(crate) fn __reduce104<
        'input,
    >(
        __lookahead_start: Option<&LineNum>,
        __symbols: &mut alloc::vec::Vec<(LineNum,__Symbol<>,LineNum)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // var = "ID", ":", "TYPE", "=", single_expr => ActionFn(10);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant20(__symbols);
        let __sym3 = __pop_Variant1(__symbols);
        let __sym2 = __pop_Variant4(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action10::<>(__sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (5, 34)
    }
}
pub use self::__parse__Program::ProgramParser;

fn __action0<
    'input,
>(
    (_, __0, _): (LineNum, alloc::vec::Vec<Class>, LineNum),
) -> alloc::vec::Vec<Class>
{
    __0
}

fn __action1<
    'input,
>(
    (_, __0, _): (LineNum, alloc::vec::Vec<Class>, LineNum),
) -> alloc::vec::Vec<Class>
{
    __0
}

fn __action2<
    'input,
>(
    (_, l, _): (LineNum, ((usize, usize), String), LineNum),
    (_, class_name, _): (LineNum, String, LineNum),
    (_, _, _): (LineNum, Token, LineNum),
    (_, f, _): (LineNum, alloc::vec::Vec<Feature>, LineNum),
    (_, _, _): (LineNum, Token, LineNum),
    (_, _, _): (LineNum, Token, LineNum),
) -> Class
{
    Class {
        name: class_name,
        parent: None,
        features: f,
        position: l.0,
        file_name: l.1,
    }
}

fn __action3<
    'input,
>(
    (_, l, _): (LineNum, ((usize, usize), String), LineNum),
    (_, class_name, _): (LineNum, String, LineNum),
    (_, _, _): (LineNum, Token, LineNum),
    (_, parent_name, _): (LineNum, String, LineNum),
    (_, _, _): (LineNum, Token, LineNum),
    (_, f, _): (LineNum, alloc::vec::Vec<Feature>, LineNum),
    (_, _, _): (LineNum, Token, LineNum),
    (_, _, _): (LineNum, Token, LineNum),
) -> Class
{
    Class {
        name: class_name,
        parent: Some(parent_name),
        features: f,
        position: l.0,
        file_name: l.1,
    }
}

fn __action4<
    'input,
>(
    (_, attr_name, _): (LineNum, (String, (usize, usize)), LineNum),
    (_, _, _): (LineNum, Token, LineNum),
    (_, type_name, _): (LineNum, String, LineNum),
    (_, _, _): (LineNum, Token, LineNum),
) -> Feature
{
    {
        Feature::Attribute(VarDecl {
            name: attr_name.0,
            type_: type_name,
            init: Box::new(None),
            position: attr_name.1
        })
    }
}

fn __action5<
    'input,
>(
    (_, attr_name, _): (LineNum, (String, (usize, usize)), LineNum),
    (_, _, _): (LineNum, Token, LineNum),
    (_, type_name, _): (LineNum, String, LineNum),
    (_, _, _): (LineNum, (usize, usize), LineNum),
    (_, e, _): (LineNum, Expr, LineNum),
    (_, _, _): (LineNum, Token, LineNum),
) -> Feature
{
    {
        Feature::Attribute(VarDecl{
            name:attr_name.0,
            type_:type_name,
            init:Box::new(Some(e)),
            position: attr_name.1
        })
    }
}

fn __action6<
    'input,
>(
    (_, pos, _): (LineNum, (usize, usize), LineNum),
    (_, method_name, _): (LineNum, (String, (usize, usize)), LineNum),
    (_, _, _): (LineNum, Token, LineNum),
    (_, param_, _): (LineNum, core::option::Option<Vec<ParamDecl>>, LineNum),
    (_, _, _): (LineNum, Token, LineNum),
    (_, _, _): (LineNum, Token, LineNum),
    (_, r_type, _): (LineNum, String, LineNum),
    (_, _, _): (LineNum, Token, LineNum),
    (_, e, _): (LineNum, Vec<Expr>, LineNum),
    (_, _, _): (LineNum, Token, LineNum),
    (_, _, _): (LineNum, Token, LineNum),
) -> Feature
{
    {
        Feature::Method(MethodDecl{
            name: method_name.0,
            param: Box::new(param_.unwrap_or(vec![])),
            return_type:r_type,
            body: Box::new(Some(e)),
            position: pos,
            // body: Box::new(Box::new(e)),
        })
    }
}

fn __action7<
    'input,
>(
    (_, pos, _): (LineNum, (usize, usize), LineNum),
    (_, method_name, _): (LineNum, (String, (usize, usize)), LineNum),
    (_, _, _): (LineNum, Token, LineNum),
    (_, param_, _): (LineNum, core::option::Option<Vec<ParamDecl>>, LineNum),
    (_, _, _): (LineNum, Token, LineNum),
    (_, _, _): (LineNum, Token, LineNum),
    (_, r_type, _): (LineNum, String, LineNum),
    (_, _, _): (LineNum, Token, LineNum),
    (_, _, _): (LineNum, Token, LineNum),
    (_, _, _): (LineNum, Token, LineNum),
) -> Feature
{
    {
        Feature::Method(MethodDecl{
            name: method_name.0,
            param: Box::new(param_.unwrap_or(vec![])),
            return_type:r_type,
            body: Box::new(None),
            position: pos,
        })
    }
}

fn __action8<
    'input,
>(
    (_, id, _): (LineNum, (String, (usize, usize)), LineNum),
    (_, _, _): (LineNum, Token, LineNum),
    (_, t, _): (LineNum, String, LineNum),
) -> ParamDecl
{
    (id.0,t)
}

fn __action9<
    'input,
>(
    (_, id, _): (LineNum, (String, (usize, usize)), LineNum),
    (_, _, _): (LineNum, Token, LineNum),
    (_, type_name, _): (LineNum, String, LineNum),
) -> VarDecl
{
    VarDecl{
        name:id.0,
        type_: type_name,
        init: Box::new(None),
        position: id.1,
    }
}

fn __action10<
    'input,
>(
    (_, id, _): (LineNum, (String, (usize, usize)), LineNum),
    (_, _, _): (LineNum, Token, LineNum),
    (_, type_name, _): (LineNum, String, LineNum),
    (_, _, _): (LineNum, (usize, usize), LineNum),
    (_, e, _): (LineNum, Expr, LineNum),
) -> VarDecl
{
    VarDecl{
        name:id.0,
        type_: type_name,
        init: Box::new(Some(e)),
        position: id.1,
    }
}

fn __action11<
    'input,
>(
    (_, _, _): (LineNum, (usize, usize), LineNum),
    (_, var_, _): (LineNum, Vec<VarDecl>, LineNum),
    (_, _, _): (LineNum, Token, LineNum),
) -> Expr
{
    Expr::Let(Let{var_decls:Box::new(var_)})
}

fn __action12<
    'input,
>(
    (_, id, _): (LineNum, (String, (usize, usize)), LineNum),
    (_, _, _): (LineNum, (usize, usize), LineNum),
    (_, expr, _): (LineNum, Expr, LineNum),
    (_, _, _): (LineNum, Token, LineNum),
) -> Expr
{
    Expr::Assignment(Assignment{id:id, compute:Box::new(expr)})
}

fn __action13<
    'input,
>(
    (_, e, _): (LineNum, Expr, LineNum),
    (_, _, _): (LineNum, Token, LineNum),
    (_, id, _): (LineNum, (String, (usize, usize)), LineNum),
    (_, _, _): (LineNum, Token, LineNum),
    (_, args, _): (LineNum, core::option::Option<Vec<Expr>>, LineNum),
    (_, _, _): (LineNum, Token, LineNum),
    (_, _, _): (LineNum, Token, LineNum),
) -> Expr
{
    {
        Expr::Dispatch (Dispatch{
            target: Box::new(Some(e)),
            fun_name: id.0,
            actual: Box::new(args.unwrap_or(vec![])),
            position: id.1
        })
    }
}

fn __action14<
    'input,
>(
    (_, id, _): (LineNum, (String, (usize, usize)), LineNum),
    (_, _, _): (LineNum, Token, LineNum),
    (_, args, _): (LineNum, core::option::Option<Vec<Expr>>, LineNum),
    (_, _, _): (LineNum, Token, LineNum),
    (_, _, _): (LineNum, Token, LineNum),
) -> Expr
{
    {
        Expr::Dispatch (Dispatch{
            // target: Box::new(Some("self".to_string())),
            target:Box::new(Some(Expr::Identifier("self".to_string(), (0,0)))),
            fun_name: id.0,
            actual: Box::new(args.unwrap_or(vec![])),
            position: id.1
        })
    }
}

fn __action15<
    'input,
>(
    (_, pos, _): (LineNum, (usize, usize), LineNum),
    (_, _, _): (LineNum, Token, LineNum),
    (_, test_, _): (LineNum, Expr, LineNum),
    (_, _, _): (LineNum, Token, LineNum),
    (_, _, _): (LineNum, Token, LineNum),
    (_, _, _): (LineNum, Token, LineNum),
    (_, then_, _): (LineNum, alloc::vec::Vec<Expr>, LineNum),
    (_, _, _): (LineNum, Token, LineNum),
    (_, _, _): (LineNum, (usize, usize), LineNum),
    (_, _, _): (LineNum, Token, LineNum),
    (_, else_, _): (LineNum, alloc::vec::Vec<Expr>, LineNum),
    (_, _, _): (LineNum, Token, LineNum),
) -> Expr
{
    Expr::Cond(Cond{
        test:Box::new(test_),
        then_body: Box::new(then_),
        else_body: Box::new(else_),
        postion: pos,
    })
}

fn __action16<
    'input,
>(
    (_, pos, _): (LineNum, (usize, usize), LineNum),
    (_, test_, _): (LineNum, Expr, LineNum),
    (_, _, _): (LineNum, Token, LineNum),
    (_, _, _): (LineNum, Token, LineNum),
    (_, then_, _): (LineNum, alloc::vec::Vec<Expr>, LineNum),
    (_, _, _): (LineNum, Token, LineNum),
    (_, _, _): (LineNum, (usize, usize), LineNum),
    (_, _, _): (LineNum, Token, LineNum),
    (_, else_, _): (LineNum, alloc::vec::Vec<Expr>, LineNum),
    (_, _, _): (LineNum, Token, LineNum),
) -> Expr
{
    Expr::Cond(Cond{
        test:Box::new(test_),
        then_body: Box::new(then_),
        else_body: Box::new(else_),
        postion: pos,
    })
}

fn __action17<
    'input,
>(
    (_, pos, _): (LineNum, (usize, usize), LineNum),
    (_, _, _): (LineNum, Token, LineNum),
    (_, test_, _): (LineNum, Expr, LineNum),
    (_, _, _): (LineNum, Token, LineNum),
    (_, _, _): (LineNum, Token, LineNum),
    (_, body_, _): (LineNum, alloc::vec::Vec<Expr>, LineNum),
    (_, _, _): (LineNum, Token, LineNum),
) -> Expr
{
    Expr::While(While{
        test:Box::new(test_),
        body: Box::new(body_),
        postion: pos,
    })
}

fn __action18<
    'input,
>(
    (_, pos, _): (LineNum, (usize, usize), LineNum),
    (_, test_, _): (LineNum, Expr, LineNum),
    (_, _, _): (LineNum, Token, LineNum),
    (_, body_, _): (LineNum, alloc::vec::Vec<Expr>, LineNum),
    (_, _, _): (LineNum, Token, LineNum),
) -> Expr
{
    Expr::While(While{
        test:Box::new(test_),
        body: Box::new(body_),
        postion: pos,
    })
}

fn __action19<
    'input,
>(
    (_, pos, _): (LineNum, (usize, usize), LineNum),
    (_, val, _): (LineNum, Expr, LineNum),
    (_, _, _): (LineNum, Token, LineNum),
) -> Expr
{
    Expr::Return(Return{
        val: Box::new(val),
        position: pos,
    })
}

fn __action20<
    'input,
>(
    (_, __0, _): (LineNum, Expr, LineNum),
) -> Expr
{
    __0
}

fn __action21<
    'input,
>(
    (_, id, _): (LineNum, (String, (usize, usize)), LineNum),
) -> Expr
{
    Expr::Identifier(id.0,id.1)
}

fn __action22<
    'input,
>(
    (_, s, _): (LineNum, String, LineNum),
) -> Expr
{
    Expr::Str(s)
}

fn __action23<
    'input,
>(
    (_, b, _): (LineNum, bool, LineNum),
) -> Expr
{
    Expr::Bool(b)
}

fn __action24<
    'input,
>(
    (_, i, _): (LineNum, String, LineNum),
) -> Expr
{
    Expr::Int(i.parse().unwrap())
}

fn __action25<
    'input,
>(
    (_, _, _): (LineNum, (usize, usize), LineNum),
    (_, class_name, _): (LineNum, String, LineNum),
) -> Expr
{
    Expr::New(class_name)
}

fn __action26<
    'input,
>(
    (_, __0, _): (LineNum, Token, LineNum),
) -> MathOp
{
    MathOp::ComputeOp(ComputeOp::Add)
}

fn __action27<
    'input,
>(
    (_, __0, _): (LineNum, Token, LineNum),
) -> MathOp
{
    MathOp::ComputeOp(ComputeOp::Minus)
}

fn __action28<
    'input,
>(
    (_, __0, _): (LineNum, Token, LineNum),
) -> MathOp
{
    MathOp::ComputeOp(ComputeOp::Divide)
}

fn __action29<
    'input,
>(
    (_, __0, _): (LineNum, Token, LineNum),
) -> MathOp
{
    MathOp::ComputeOp(ComputeOp::Mul)
}

fn __action30<
    'input,
>(
    (_, __0, _): (LineNum, Token, LineNum),
) -> MathOp
{
    MathOp::CondOp(CondOp::More)
}

fn __action31<
    'input,
>(
    (_, __0, _): (LineNum, Token, LineNum),
) -> MathOp
{
    MathOp::CondOp(CondOp::MoreE)
}

fn __action32<
    'input,
>(
    (_, __0, _): (LineNum, Token, LineNum),
) -> MathOp
{
    MathOp::CondOp(CondOp::Less)
}

fn __action33<
    'input,
>(
    (_, __0, _): (LineNum, Token, LineNum),
) -> MathOp
{
    MathOp::CondOp(CondOp::LessE)
}

fn __action34<
    'input,
>(
    (_, __0, _): (LineNum, Token, LineNum),
) -> MathOp
{
    MathOp::CondOp(CondOp::Equal)
}

fn __action35<
    'input,
>(
    (_, l, _): (LineNum, Expr, LineNum),
    (_, op, _): (LineNum, MathOp, LineNum),
    (_, r, _): (LineNum, Expr, LineNum),
) -> Expr
{
    Expr::Math(Math {
        left: Box::new(l),
        op: Box::new(op),
        right: Box::new(r),
    })
}

fn __action36<
    'input,
>(
    (_, __0, _): (LineNum, Expr, LineNum),
) -> Expr
{
    __0
}

fn __action37<
    'input,
>(
    (_, l, _): (LineNum, Expr, LineNum),
    (_, op, _): (LineNum, MathOp, LineNum),
    (_, r, _): (LineNum, Expr, LineNum),
) -> Expr
{
    Expr::Math(Math {
        left: Box::new(l),
        op: Box::new(op),
        right: Box::new(r),
    })
}

fn __action38<
    'input,
>(
    (_, __0, _): (LineNum, Expr, LineNum),
) -> Expr
{
    __0
}

fn __action39<
    'input,
>(
    (_, l, _): (LineNum, Expr, LineNum),
    (_, op, _): (LineNum, MathOp, LineNum),
    (_, r, _): (LineNum, Expr, LineNum),
) -> Expr
{
    Expr::Math(Math { 
        left: Box::new(l),
        op: Box::new(op),
        right: Box::new(r),
    })
}

fn __action40<
    'input,
>(
    (_, __0, _): (LineNum, Expr, LineNum),
) -> Expr
{
    __0
}

fn __action41<
    'input,
>(
    __lookbehind: &LineNum,
    __lookahead: &LineNum,
) -> alloc::vec::Vec<Expr>
{
    alloc::vec![]
}

fn __action42<
    'input,
>(
    (_, v, _): (LineNum, alloc::vec::Vec<Expr>, LineNum),
) -> alloc::vec::Vec<Expr>
{
    v
}

fn __action43<
    'input,
>(
    (_, __0, _): (LineNum, Vec<Expr>, LineNum),
) -> core::option::Option<Vec<Expr>>
{
    Some(__0)
}

fn __action44<
    'input,
>(
    __lookbehind: &LineNum,
    __lookahead: &LineNum,
) -> core::option::Option<Vec<Expr>>
{
    None
}

fn __action45<
    'input,
>(
    (_, i1, _): (LineNum, Expr, LineNum),
    (_, i2, _): (LineNum, alloc::vec::Vec<(Token, Expr)>, LineNum),
) -> Vec<Expr>
{
    {
        let mut items = vec![i1];
        items.extend(i2.into_iter().map(|e| e.1));
        items
    }
}

fn __action46<
    'input,
>(
    (_, i1, _): (LineNum, VarDecl, LineNum),
    (_, i2, _): (LineNum, alloc::vec::Vec<(Token, VarDecl)>, LineNum),
) -> Vec<VarDecl>
{
    {
        let mut items = vec![i1];
        items.extend(i2.into_iter().map(|e| e.1));
        items
    }
}

fn __action47<
    'input,
>(
    (_, i1, _): (LineNum, Expr, LineNum),
    (_, i2, _): (LineNum, alloc::vec::Vec<Expr>, LineNum),
) -> Vec<Expr>
{
    {
        let mut items = vec![i1];
        items.extend(i2.into_iter().map(|e| e));
        items
    }
}

fn __action48<
    'input,
>(
    (_, __0, _): (LineNum, Vec<ParamDecl>, LineNum),
) -> core::option::Option<Vec<ParamDecl>>
{
    Some(__0)
}

fn __action49<
    'input,
>(
    __lookbehind: &LineNum,
    __lookahead: &LineNum,
) -> core::option::Option<Vec<ParamDecl>>
{
    None
}

fn __action50<
    'input,
>(
    (_, i1, _): (LineNum, ParamDecl, LineNum),
    (_, i2, _): (LineNum, alloc::vec::Vec<(Token, ParamDecl)>, LineNum),
) -> Vec<ParamDecl>
{
    {
        let mut items = vec![i1];
        items.extend(i2.into_iter().map(|e| e.1));
        items
    }
}

fn __action51<
    'input,
>(
    __lookbehind: &LineNum,
    __lookahead: &LineNum,
) -> alloc::vec::Vec<Feature>
{
    alloc::vec![]
}

fn __action52<
    'input,
>(
    (_, v, _): (LineNum, alloc::vec::Vec<Feature>, LineNum),
) -> alloc::vec::Vec<Feature>
{
    v
}

fn __action53<
    'input,
>(
    __lookbehind: &LineNum,
    __lookahead: &LineNum,
) -> alloc::vec::Vec<Class>
{
    alloc::vec![]
}

fn __action54<
    'input,
>(
    (_, v, _): (LineNum, alloc::vec::Vec<Class>, LineNum),
) -> alloc::vec::Vec<Class>
{
    v
}

fn __action55<
    'input,
>(
    (_, __0, _): (LineNum, Class, LineNum),
) -> alloc::vec::Vec<Class>
{
    alloc::vec![__0]
}

fn __action56<
    'input,
>(
    (_, v, _): (LineNum, alloc::vec::Vec<Class>, LineNum),
    (_, e, _): (LineNum, Class, LineNum),
) -> alloc::vec::Vec<Class>
{
    { let mut v = v; v.push(e); v }
}

fn __action57<
    'input,
>(
    (_, __0, _): (LineNum, Feature, LineNum),
) -> alloc::vec::Vec<Feature>
{
    alloc::vec![__0]
}

fn __action58<
    'input,
>(
    (_, v, _): (LineNum, alloc::vec::Vec<Feature>, LineNum),
    (_, e, _): (LineNum, Feature, LineNum),
) -> alloc::vec::Vec<Feature>
{
    { let mut v = v; v.push(e); v }
}

fn __action59<
    'input,
>(
    __lookbehind: &LineNum,
    __lookahead: &LineNum,
) -> alloc::vec::Vec<(Token, ParamDecl)>
{
    alloc::vec![]
}

fn __action60<
    'input,
>(
    (_, v, _): (LineNum, alloc::vec::Vec<(Token, ParamDecl)>, LineNum),
) -> alloc::vec::Vec<(Token, ParamDecl)>
{
    v
}

fn __action61<
    'input,
>(
    (_, __0, _): (LineNum, Token, LineNum),
    (_, __1, _): (LineNum, ParamDecl, LineNum),
) -> (Token, ParamDecl)
{
    (__0, __1)
}

fn __action62<
    'input,
>(
    __lookbehind: &LineNum,
    __lookahead: &LineNum,
) -> alloc::vec::Vec<(Token, VarDecl)>
{
    alloc::vec![]
}

fn __action63<
    'input,
>(
    (_, v, _): (LineNum, alloc::vec::Vec<(Token, VarDecl)>, LineNum),
) -> alloc::vec::Vec<(Token, VarDecl)>
{
    v
}

fn __action64<
    'input,
>(
    (_, __0, _): (LineNum, Token, LineNum),
    (_, __1, _): (LineNum, VarDecl, LineNum),
) -> (Token, VarDecl)
{
    (__0, __1)
}

fn __action65<
    'input,
>(
    __lookbehind: &LineNum,
    __lookahead: &LineNum,
) -> alloc::vec::Vec<(Token, Expr)>
{
    alloc::vec![]
}

fn __action66<
    'input,
>(
    (_, v, _): (LineNum, alloc::vec::Vec<(Token, Expr)>, LineNum),
) -> alloc::vec::Vec<(Token, Expr)>
{
    v
}

fn __action67<
    'input,
>(
    (_, __0, _): (LineNum, Token, LineNum),
    (_, __1, _): (LineNum, Expr, LineNum),
) -> (Token, Expr)
{
    (__0, __1)
}

fn __action68<
    'input,
>(
    (_, __0, _): (LineNum, Expr, LineNum),
) -> alloc::vec::Vec<Expr>
{
    alloc::vec![__0]
}

fn __action69<
    'input,
>(
    (_, v, _): (LineNum, alloc::vec::Vec<Expr>, LineNum),
    (_, e, _): (LineNum, Expr, LineNum),
) -> alloc::vec::Vec<Expr>
{
    { let mut v = v; v.push(e); v }
}

fn __action70<
    'input,
>(
    (_, __0, _): (LineNum, (Token, Expr), LineNum),
) -> alloc::vec::Vec<(Token, Expr)>
{
    alloc::vec![__0]
}

fn __action71<
    'input,
>(
    (_, v, _): (LineNum, alloc::vec::Vec<(Token, Expr)>, LineNum),
    (_, e, _): (LineNum, (Token, Expr), LineNum),
) -> alloc::vec::Vec<(Token, Expr)>
{
    { let mut v = v; v.push(e); v }
}

fn __action72<
    'input,
>(
    (_, __0, _): (LineNum, (Token, VarDecl), LineNum),
) -> alloc::vec::Vec<(Token, VarDecl)>
{
    alloc::vec![__0]
}

fn __action73<
    'input,
>(
    (_, v, _): (LineNum, alloc::vec::Vec<(Token, VarDecl)>, LineNum),
    (_, e, _): (LineNum, (Token, VarDecl), LineNum),
) -> alloc::vec::Vec<(Token, VarDecl)>
{
    { let mut v = v; v.push(e); v }
}

fn __action74<
    'input,
>(
    (_, __0, _): (LineNum, (Token, ParamDecl), LineNum),
) -> alloc::vec::Vec<(Token, ParamDecl)>
{
    alloc::vec![__0]
}

fn __action75<
    'input,
>(
    (_, v, _): (LineNum, alloc::vec::Vec<(Token, ParamDecl)>, LineNum),
    (_, e, _): (LineNum, (Token, ParamDecl), LineNum),
) -> alloc::vec::Vec<(Token, ParamDecl)>
{
    { let mut v = v; v.push(e); v }
}

fn __action76<
    'input,
>(
    __0: (LineNum, Token, LineNum),
    __1: (LineNum, Expr, LineNum),
) -> alloc::vec::Vec<(Token, Expr)>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action67(
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action70(
        __temp0,
    )
}

fn __action77<
    'input,
>(
    __0: (LineNum, alloc::vec::Vec<(Token, Expr)>, LineNum),
    __1: (LineNum, Token, LineNum),
    __2: (LineNum, Expr, LineNum),
) -> alloc::vec::Vec<(Token, Expr)>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action67(
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action71(
        __0,
        __temp0,
    )
}

fn __action78<
    'input,
>(
    __0: (LineNum, Expr, LineNum),
) -> Vec<Expr>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action65(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action45(
        __0,
        __temp0,
    )
}

fn __action79<
    'input,
>(
    __0: (LineNum, Expr, LineNum),
    __1: (LineNum, alloc::vec::Vec<(Token, Expr)>, LineNum),
) -> Vec<Expr>
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action66(
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action45(
        __0,
        __temp0,
    )
}

fn __action80<
    'input,
>(
    __0: (LineNum, Token, LineNum),
    __1: (LineNum, ParamDecl, LineNum),
) -> alloc::vec::Vec<(Token, ParamDecl)>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action61(
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action74(
        __temp0,
    )
}

fn __action81<
    'input,
>(
    __0: (LineNum, alloc::vec::Vec<(Token, ParamDecl)>, LineNum),
    __1: (LineNum, Token, LineNum),
    __2: (LineNum, ParamDecl, LineNum),
) -> alloc::vec::Vec<(Token, ParamDecl)>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action61(
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action75(
        __0,
        __temp0,
    )
}

fn __action82<
    'input,
>(
    __0: (LineNum, ParamDecl, LineNum),
) -> Vec<ParamDecl>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action59(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action50(
        __0,
        __temp0,
    )
}

fn __action83<
    'input,
>(
    __0: (LineNum, ParamDecl, LineNum),
    __1: (LineNum, alloc::vec::Vec<(Token, ParamDecl)>, LineNum),
) -> Vec<ParamDecl>
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action60(
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action50(
        __0,
        __temp0,
    )
}

fn __action84<
    'input,
>(
    __0: (LineNum, Token, LineNum),
    __1: (LineNum, VarDecl, LineNum),
) -> alloc::vec::Vec<(Token, VarDecl)>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action64(
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action72(
        __temp0,
    )
}

fn __action85<
    'input,
>(
    __0: (LineNum, alloc::vec::Vec<(Token, VarDecl)>, LineNum),
    __1: (LineNum, Token, LineNum),
    __2: (LineNum, VarDecl, LineNum),
) -> alloc::vec::Vec<(Token, VarDecl)>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action64(
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action73(
        __0,
        __temp0,
    )
}

fn __action86<
    'input,
>(
    __0: (LineNum, VarDecl, LineNum),
) -> Vec<VarDecl>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action62(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action46(
        __0,
        __temp0,
    )
}

fn __action87<
    'input,
>(
    __0: (LineNum, VarDecl, LineNum),
    __1: (LineNum, alloc::vec::Vec<(Token, VarDecl)>, LineNum),
) -> Vec<VarDecl>
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action63(
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action46(
        __0,
        __temp0,
    )
}

fn __action88<
    'input,
>(
    __lookbehind: &LineNum,
    __lookahead: &LineNum,
) -> alloc::vec::Vec<Class>
{
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action53(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action1(
        __temp0,
    )
}

fn __action89<
    'input,
>(
    __0: (LineNum, alloc::vec::Vec<Class>, LineNum),
) -> alloc::vec::Vec<Class>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action54(
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action1(
        __temp0,
    )
}

fn __action90<
    'input,
>(
    __0: (LineNum, Expr, LineNum),
) -> core::option::Option<Vec<Expr>>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action78(
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action43(
        __temp0,
    )
}

fn __action91<
    'input,
>(
    __0: (LineNum, Expr, LineNum),
    __1: (LineNum, alloc::vec::Vec<(Token, Expr)>, LineNum),
) -> core::option::Option<Vec<Expr>>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action79(
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action43(
        __temp0,
    )
}

fn __action92<
    'input,
>(
    __0: (LineNum, Expr, LineNum),
    __1: (LineNum, Token, LineNum),
    __2: (LineNum, (String, (usize, usize)), LineNum),
    __3: (LineNum, Token, LineNum),
    __4: (LineNum, Expr, LineNum),
    __5: (LineNum, Token, LineNum),
    __6: (LineNum, Token, LineNum),
) -> Expr
{
    let __start0 = __4.0.clone();
    let __end0 = __4.2.clone();
    let __temp0 = __action90(
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action13(
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __5,
        __6,
    )
}

fn __action93<
    'input,
>(
    __0: (LineNum, Expr, LineNum),
    __1: (LineNum, Token, LineNum),
    __2: (LineNum, (String, (usize, usize)), LineNum),
    __3: (LineNum, Token, LineNum),
    __4: (LineNum, Expr, LineNum),
    __5: (LineNum, alloc::vec::Vec<(Token, Expr)>, LineNum),
    __6: (LineNum, Token, LineNum),
    __7: (LineNum, Token, LineNum),
) -> Expr
{
    let __start0 = __4.0.clone();
    let __end0 = __5.2.clone();
    let __temp0 = __action91(
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action13(
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __6,
        __7,
    )
}

fn __action94<
    'input,
>(
    __0: (LineNum, Expr, LineNum),
    __1: (LineNum, Token, LineNum),
    __2: (LineNum, (String, (usize, usize)), LineNum),
    __3: (LineNum, Token, LineNum),
    __4: (LineNum, Token, LineNum),
    __5: (LineNum, Token, LineNum),
) -> Expr
{
    let __start0 = __3.2.clone();
    let __end0 = __4.0.clone();
    let __temp0 = __action44(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action13(
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __4,
        __5,
    )
}

fn __action95<
    'input,
>(
    __0: (LineNum, (String, (usize, usize)), LineNum),
    __1: (LineNum, Token, LineNum),
    __2: (LineNum, Expr, LineNum),
    __3: (LineNum, Token, LineNum),
    __4: (LineNum, Token, LineNum),
) -> Expr
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action90(
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action14(
        __0,
        __1,
        __temp0,
        __3,
        __4,
    )
}

fn __action96<
    'input,
>(
    __0: (LineNum, (String, (usize, usize)), LineNum),
    __1: (LineNum, Token, LineNum),
    __2: (LineNum, Expr, LineNum),
    __3: (LineNum, alloc::vec::Vec<(Token, Expr)>, LineNum),
    __4: (LineNum, Token, LineNum),
    __5: (LineNum, Token, LineNum),
) -> Expr
{
    let __start0 = __2.0.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action91(
        __2,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action14(
        __0,
        __1,
        __temp0,
        __4,
        __5,
    )
}

fn __action97<
    'input,
>(
    __0: (LineNum, (String, (usize, usize)), LineNum),
    __1: (LineNum, Token, LineNum),
    __2: (LineNum, Token, LineNum),
    __3: (LineNum, Token, LineNum),
) -> Expr
{
    let __start0 = __1.2.clone();
    let __end0 = __2.0.clone();
    let __temp0 = __action44(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action14(
        __0,
        __1,
        __temp0,
        __2,
        __3,
    )
}

fn __action98<
    'input,
>(
    __0: (LineNum, ParamDecl, LineNum),
) -> core::option::Option<Vec<ParamDecl>>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action82(
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action48(
        __temp0,
    )
}

fn __action99<
    'input,
>(
    __0: (LineNum, ParamDecl, LineNum),
    __1: (LineNum, alloc::vec::Vec<(Token, ParamDecl)>, LineNum),
) -> core::option::Option<Vec<ParamDecl>>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action83(
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action48(
        __temp0,
    )
}

fn __action100<
    'input,
>(
    __0: (LineNum, (usize, usize), LineNum),
    __1: (LineNum, (String, (usize, usize)), LineNum),
    __2: (LineNum, Token, LineNum),
    __3: (LineNum, ParamDecl, LineNum),
    __4: (LineNum, Token, LineNum),
    __5: (LineNum, Token, LineNum),
    __6: (LineNum, String, LineNum),
    __7: (LineNum, Token, LineNum),
    __8: (LineNum, Vec<Expr>, LineNum),
    __9: (LineNum, Token, LineNum),
    __10: (LineNum, Token, LineNum),
) -> Feature
{
    let __start0 = __3.0.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action98(
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action6(
        __0,
        __1,
        __2,
        __temp0,
        __4,
        __5,
        __6,
        __7,
        __8,
        __9,
        __10,
    )
}

fn __action101<
    'input,
>(
    __0: (LineNum, (usize, usize), LineNum),
    __1: (LineNum, (String, (usize, usize)), LineNum),
    __2: (LineNum, Token, LineNum),
    __3: (LineNum, ParamDecl, LineNum),
    __4: (LineNum, alloc::vec::Vec<(Token, ParamDecl)>, LineNum),
    __5: (LineNum, Token, LineNum),
    __6: (LineNum, Token, LineNum),
    __7: (LineNum, String, LineNum),
    __8: (LineNum, Token, LineNum),
    __9: (LineNum, Vec<Expr>, LineNum),
    __10: (LineNum, Token, LineNum),
    __11: (LineNum, Token, LineNum),
) -> Feature
{
    let __start0 = __3.0.clone();
    let __end0 = __4.2.clone();
    let __temp0 = __action99(
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action6(
        __0,
        __1,
        __2,
        __temp0,
        __5,
        __6,
        __7,
        __8,
        __9,
        __10,
        __11,
    )
}

fn __action102<
    'input,
>(
    __0: (LineNum, (usize, usize), LineNum),
    __1: (LineNum, (String, (usize, usize)), LineNum),
    __2: (LineNum, Token, LineNum),
    __3: (LineNum, Token, LineNum),
    __4: (LineNum, Token, LineNum),
    __5: (LineNum, String, LineNum),
    __6: (LineNum, Token, LineNum),
    __7: (LineNum, Vec<Expr>, LineNum),
    __8: (LineNum, Token, LineNum),
    __9: (LineNum, Token, LineNum),
) -> Feature
{
    let __start0 = __2.2.clone();
    let __end0 = __3.0.clone();
    let __temp0 = __action49(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action6(
        __0,
        __1,
        __2,
        __temp0,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
        __9,
    )
}

fn __action103<
    'input,
>(
    __0: (LineNum, (usize, usize), LineNum),
    __1: (LineNum, (String, (usize, usize)), LineNum),
    __2: (LineNum, Token, LineNum),
    __3: (LineNum, ParamDecl, LineNum),
    __4: (LineNum, Token, LineNum),
    __5: (LineNum, Token, LineNum),
    __6: (LineNum, String, LineNum),
    __7: (LineNum, Token, LineNum),
    __8: (LineNum, Token, LineNum),
    __9: (LineNum, Token, LineNum),
) -> Feature
{
    let __start0 = __3.0.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action98(
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action7(
        __0,
        __1,
        __2,
        __temp0,
        __4,
        __5,
        __6,
        __7,
        __8,
        __9,
    )
}

fn __action104<
    'input,
>(
    __0: (LineNum, (usize, usize), LineNum),
    __1: (LineNum, (String, (usize, usize)), LineNum),
    __2: (LineNum, Token, LineNum),
    __3: (LineNum, ParamDecl, LineNum),
    __4: (LineNum, alloc::vec::Vec<(Token, ParamDecl)>, LineNum),
    __5: (LineNum, Token, LineNum),
    __6: (LineNum, Token, LineNum),
    __7: (LineNum, String, LineNum),
    __8: (LineNum, Token, LineNum),
    __9: (LineNum, Token, LineNum),
    __10: (LineNum, Token, LineNum),
) -> Feature
{
    let __start0 = __3.0.clone();
    let __end0 = __4.2.clone();
    let __temp0 = __action99(
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action7(
        __0,
        __1,
        __2,
        __temp0,
        __5,
        __6,
        __7,
        __8,
        __9,
        __10,
    )
}

fn __action105<
    'input,
>(
    __0: (LineNum, (usize, usize), LineNum),
    __1: (LineNum, (String, (usize, usize)), LineNum),
    __2: (LineNum, Token, LineNum),
    __3: (LineNum, Token, LineNum),
    __4: (LineNum, Token, LineNum),
    __5: (LineNum, String, LineNum),
    __6: (LineNum, Token, LineNum),
    __7: (LineNum, Token, LineNum),
    __8: (LineNum, Token, LineNum),
) -> Feature
{
    let __start0 = __2.2.clone();
    let __end0 = __3.0.clone();
    let __temp0 = __action49(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action7(
        __0,
        __1,
        __2,
        __temp0,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
    )
}

fn __action106<
    'input,
>(
    __0: (LineNum, (usize, usize), LineNum),
    __1: (LineNum, VarDecl, LineNum),
    __2: (LineNum, Token, LineNum),
) -> Expr
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action86(
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action11(
        __0,
        __temp0,
        __2,
    )
}

fn __action107<
    'input,
>(
    __0: (LineNum, (usize, usize), LineNum),
    __1: (LineNum, VarDecl, LineNum),
    __2: (LineNum, alloc::vec::Vec<(Token, VarDecl)>, LineNum),
    __3: (LineNum, Token, LineNum),
) -> Expr
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action87(
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action11(
        __0,
        __temp0,
        __3,
    )
}

fn __action108<
    'input,
>(
    __0: (LineNum, (usize, usize), LineNum),
    __1: (LineNum, Token, LineNum),
    __2: (LineNum, Expr, LineNum),
    __3: (LineNum, Token, LineNum),
    __4: (LineNum, Token, LineNum),
    __5: (LineNum, Token, LineNum),
    __6: (LineNum, Token, LineNum),
    __7: (LineNum, (usize, usize), LineNum),
    __8: (LineNum, Token, LineNum),
    __9: (LineNum, Token, LineNum),
) -> Expr
{
    let __start0 = __5.2.clone();
    let __end0 = __6.0.clone();
    let __start1 = __8.2.clone();
    let __end1 = __9.0.clone();
    let __temp0 = __action41(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action41(
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action15(
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __temp0,
        __6,
        __7,
        __8,
        __temp1,
        __9,
    )
}

fn __action109<
    'input,
>(
    __0: (LineNum, (usize, usize), LineNum),
    __1: (LineNum, Token, LineNum),
    __2: (LineNum, Expr, LineNum),
    __3: (LineNum, Token, LineNum),
    __4: (LineNum, Token, LineNum),
    __5: (LineNum, Token, LineNum),
    __6: (LineNum, Token, LineNum),
    __7: (LineNum, (usize, usize), LineNum),
    __8: (LineNum, Token, LineNum),
    __9: (LineNum, alloc::vec::Vec<Expr>, LineNum),
    __10: (LineNum, Token, LineNum),
) -> Expr
{
    let __start0 = __5.2.clone();
    let __end0 = __6.0.clone();
    let __start1 = __9.0.clone();
    let __end1 = __9.2.clone();
    let __temp0 = __action41(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action42(
        __9,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action15(
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __temp0,
        __6,
        __7,
        __8,
        __temp1,
        __10,
    )
}

fn __action110<
    'input,
>(
    __0: (LineNum, (usize, usize), LineNum),
    __1: (LineNum, Token, LineNum),
    __2: (LineNum, Expr, LineNum),
    __3: (LineNum, Token, LineNum),
    __4: (LineNum, Token, LineNum),
    __5: (LineNum, Token, LineNum),
    __6: (LineNum, alloc::vec::Vec<Expr>, LineNum),
    __7: (LineNum, Token, LineNum),
    __8: (LineNum, (usize, usize), LineNum),
    __9: (LineNum, Token, LineNum),
    __10: (LineNum, Token, LineNum),
) -> Expr
{
    let __start0 = __6.0.clone();
    let __end0 = __6.2.clone();
    let __start1 = __9.2.clone();
    let __end1 = __10.0.clone();
    let __temp0 = __action42(
        __6,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action41(
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action15(
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __temp0,
        __7,
        __8,
        __9,
        __temp1,
        __10,
    )
}

fn __action111<
    'input,
>(
    __0: (LineNum, (usize, usize), LineNum),
    __1: (LineNum, Token, LineNum),
    __2: (LineNum, Expr, LineNum),
    __3: (LineNum, Token, LineNum),
    __4: (LineNum, Token, LineNum),
    __5: (LineNum, Token, LineNum),
    __6: (LineNum, alloc::vec::Vec<Expr>, LineNum),
    __7: (LineNum, Token, LineNum),
    __8: (LineNum, (usize, usize), LineNum),
    __9: (LineNum, Token, LineNum),
    __10: (LineNum, alloc::vec::Vec<Expr>, LineNum),
    __11: (LineNum, Token, LineNum),
) -> Expr
{
    let __start0 = __6.0.clone();
    let __end0 = __6.2.clone();
    let __start1 = __10.0.clone();
    let __end1 = __10.2.clone();
    let __temp0 = __action42(
        __6,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action42(
        __10,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action15(
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __temp0,
        __7,
        __8,
        __9,
        __temp1,
        __11,
    )
}

fn __action112<
    'input,
>(
    __0: (LineNum, (usize, usize), LineNum),
    __1: (LineNum, Expr, LineNum),
    __2: (LineNum, Token, LineNum),
    __3: (LineNum, Token, LineNum),
    __4: (LineNum, Token, LineNum),
    __5: (LineNum, (usize, usize), LineNum),
    __6: (LineNum, Token, LineNum),
    __7: (LineNum, Token, LineNum),
) -> Expr
{
    let __start0 = __3.2.clone();
    let __end0 = __4.0.clone();
    let __start1 = __6.2.clone();
    let __end1 = __7.0.clone();
    let __temp0 = __action41(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action41(
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action16(
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __4,
        __5,
        __6,
        __temp1,
        __7,
    )
}

fn __action113<
    'input,
>(
    __0: (LineNum, (usize, usize), LineNum),
    __1: (LineNum, Expr, LineNum),
    __2: (LineNum, Token, LineNum),
    __3: (LineNum, Token, LineNum),
    __4: (LineNum, Token, LineNum),
    __5: (LineNum, (usize, usize), LineNum),
    __6: (LineNum, Token, LineNum),
    __7: (LineNum, alloc::vec::Vec<Expr>, LineNum),
    __8: (LineNum, Token, LineNum),
) -> Expr
{
    let __start0 = __3.2.clone();
    let __end0 = __4.0.clone();
    let __start1 = __7.0.clone();
    let __end1 = __7.2.clone();
    let __temp0 = __action41(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action42(
        __7,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action16(
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __4,
        __5,
        __6,
        __temp1,
        __8,
    )
}

fn __action114<
    'input,
>(
    __0: (LineNum, (usize, usize), LineNum),
    __1: (LineNum, Expr, LineNum),
    __2: (LineNum, Token, LineNum),
    __3: (LineNum, Token, LineNum),
    __4: (LineNum, alloc::vec::Vec<Expr>, LineNum),
    __5: (LineNum, Token, LineNum),
    __6: (LineNum, (usize, usize), LineNum),
    __7: (LineNum, Token, LineNum),
    __8: (LineNum, Token, LineNum),
) -> Expr
{
    let __start0 = __4.0.clone();
    let __end0 = __4.2.clone();
    let __start1 = __7.2.clone();
    let __end1 = __8.0.clone();
    let __temp0 = __action42(
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action41(
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action16(
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __5,
        __6,
        __7,
        __temp1,
        __8,
    )
}

fn __action115<
    'input,
>(
    __0: (LineNum, (usize, usize), LineNum),
    __1: (LineNum, Expr, LineNum),
    __2: (LineNum, Token, LineNum),
    __3: (LineNum, Token, LineNum),
    __4: (LineNum, alloc::vec::Vec<Expr>, LineNum),
    __5: (LineNum, Token, LineNum),
    __6: (LineNum, (usize, usize), LineNum),
    __7: (LineNum, Token, LineNum),
    __8: (LineNum, alloc::vec::Vec<Expr>, LineNum),
    __9: (LineNum, Token, LineNum),
) -> Expr
{
    let __start0 = __4.0.clone();
    let __end0 = __4.2.clone();
    let __start1 = __8.0.clone();
    let __end1 = __8.2.clone();
    let __temp0 = __action42(
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action42(
        __8,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action16(
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __5,
        __6,
        __7,
        __temp1,
        __9,
    )
}

fn __action116<
    'input,
>(
    __0: (LineNum, (usize, usize), LineNum),
    __1: (LineNum, Token, LineNum),
    __2: (LineNum, Expr, LineNum),
    __3: (LineNum, Token, LineNum),
    __4: (LineNum, Token, LineNum),
    __5: (LineNum, Token, LineNum),
) -> Expr
{
    let __start0 = __4.2.clone();
    let __end0 = __5.0.clone();
    let __temp0 = __action41(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action17(
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __5,
    )
}

fn __action117<
    'input,
>(
    __0: (LineNum, (usize, usize), LineNum),
    __1: (LineNum, Token, LineNum),
    __2: (LineNum, Expr, LineNum),
    __3: (LineNum, Token, LineNum),
    __4: (LineNum, Token, LineNum),
    __5: (LineNum, alloc::vec::Vec<Expr>, LineNum),
    __6: (LineNum, Token, LineNum),
) -> Expr
{
    let __start0 = __5.0.clone();
    let __end0 = __5.2.clone();
    let __temp0 = __action42(
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action17(
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __6,
    )
}

fn __action118<
    'input,
>(
    __0: (LineNum, (usize, usize), LineNum),
    __1: (LineNum, Expr, LineNum),
    __2: (LineNum, Token, LineNum),
    __3: (LineNum, Token, LineNum),
) -> Expr
{
    let __start0 = __2.2.clone();
    let __end0 = __3.0.clone();
    let __temp0 = __action41(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action18(
        __0,
        __1,
        __2,
        __temp0,
        __3,
    )
}

fn __action119<
    'input,
>(
    __0: (LineNum, (usize, usize), LineNum),
    __1: (LineNum, Expr, LineNum),
    __2: (LineNum, Token, LineNum),
    __3: (LineNum, alloc::vec::Vec<Expr>, LineNum),
    __4: (LineNum, Token, LineNum),
) -> Expr
{
    let __start0 = __3.0.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action42(
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action18(
        __0,
        __1,
        __2,
        __temp0,
        __4,
    )
}

fn __action120<
    'input,
>(
    __0: (LineNum, Expr, LineNum),
) -> Vec<Expr>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action41(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action47(
        __0,
        __temp0,
    )
}

fn __action121<
    'input,
>(
    __0: (LineNum, Expr, LineNum),
    __1: (LineNum, alloc::vec::Vec<Expr>, LineNum),
) -> Vec<Expr>
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action42(
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action47(
        __0,
        __temp0,
    )
}

fn __action122<
    'input,
>(
    __0: (LineNum, ((usize, usize), String), LineNum),
    __1: (LineNum, String, LineNum),
    __2: (LineNum, Token, LineNum),
    __3: (LineNum, Token, LineNum),
    __4: (LineNum, Token, LineNum),
) -> Class
{
    let __start0 = __2.2.clone();
    let __end0 = __3.0.clone();
    let __temp0 = __action51(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action2(
        __0,
        __1,
        __2,
        __temp0,
        __3,
        __4,
    )
}

fn __action123<
    'input,
>(
    __0: (LineNum, ((usize, usize), String), LineNum),
    __1: (LineNum, String, LineNum),
    __2: (LineNum, Token, LineNum),
    __3: (LineNum, alloc::vec::Vec<Feature>, LineNum),
    __4: (LineNum, Token, LineNum),
    __5: (LineNum, Token, LineNum),
) -> Class
{
    let __start0 = __3.0.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action52(
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action2(
        __0,
        __1,
        __2,
        __temp0,
        __4,
        __5,
    )
}

fn __action124<
    'input,
>(
    __0: (LineNum, ((usize, usize), String), LineNum),
    __1: (LineNum, String, LineNum),
    __2: (LineNum, Token, LineNum),
    __3: (LineNum, String, LineNum),
    __4: (LineNum, Token, LineNum),
    __5: (LineNum, Token, LineNum),
    __6: (LineNum, Token, LineNum),
) -> Class
{
    let __start0 = __4.2.clone();
    let __end0 = __5.0.clone();
    let __temp0 = __action51(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action3(
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __5,
        __6,
    )
}

fn __action125<
    'input,
>(
    __0: (LineNum, ((usize, usize), String), LineNum),
    __1: (LineNum, String, LineNum),
    __2: (LineNum, Token, LineNum),
    __3: (LineNum, String, LineNum),
    __4: (LineNum, Token, LineNum),
    __5: (LineNum, alloc::vec::Vec<Feature>, LineNum),
    __6: (LineNum, Token, LineNum),
    __7: (LineNum, Token, LineNum),
) -> Class
{
    let __start0 = __5.0.clone();
    let __end0 = __5.2.clone();
    let __temp0 = __action52(
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action3(
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __6,
        __7,
    )
}

fn __action126<
    'input,
>(
    __0: (LineNum, (usize, usize), LineNum),
    __1: (LineNum, (String, (usize, usize)), LineNum),
    __2: (LineNum, Token, LineNum),
    __3: (LineNum, ParamDecl, LineNum),
    __4: (LineNum, Token, LineNum),
    __5: (LineNum, Token, LineNum),
    __6: (LineNum, String, LineNum),
    __7: (LineNum, Token, LineNum),
    __8: (LineNum, Expr, LineNum),
    __9: (LineNum, Token, LineNum),
    __10: (LineNum, Token, LineNum),
) -> Feature
{
    let __start0 = __8.0.clone();
    let __end0 = __8.2.clone();
    let __temp0 = __action120(
        __8,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action100(
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __temp0,
        __9,
        __10,
    )
}

fn __action127<
    'input,
>(
    __0: (LineNum, (usize, usize), LineNum),
    __1: (LineNum, (String, (usize, usize)), LineNum),
    __2: (LineNum, Token, LineNum),
    __3: (LineNum, ParamDecl, LineNum),
    __4: (LineNum, Token, LineNum),
    __5: (LineNum, Token, LineNum),
    __6: (LineNum, String, LineNum),
    __7: (LineNum, Token, LineNum),
    __8: (LineNum, Expr, LineNum),
    __9: (LineNum, alloc::vec::Vec<Expr>, LineNum),
    __10: (LineNum, Token, LineNum),
    __11: (LineNum, Token, LineNum),
) -> Feature
{
    let __start0 = __8.0.clone();
    let __end0 = __9.2.clone();
    let __temp0 = __action121(
        __8,
        __9,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action100(
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __temp0,
        __10,
        __11,
    )
}

fn __action128<
    'input,
>(
    __0: (LineNum, (usize, usize), LineNum),
    __1: (LineNum, (String, (usize, usize)), LineNum),
    __2: (LineNum, Token, LineNum),
    __3: (LineNum, ParamDecl, LineNum),
    __4: (LineNum, alloc::vec::Vec<(Token, ParamDecl)>, LineNum),
    __5: (LineNum, Token, LineNum),
    __6: (LineNum, Token, LineNum),
    __7: (LineNum, String, LineNum),
    __8: (LineNum, Token, LineNum),
    __9: (LineNum, Expr, LineNum),
    __10: (LineNum, Token, LineNum),
    __11: (LineNum, Token, LineNum),
) -> Feature
{
    let __start0 = __9.0.clone();
    let __end0 = __9.2.clone();
    let __temp0 = __action120(
        __9,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action101(
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
        __temp0,
        __10,
        __11,
    )
}

fn __action129<
    'input,
>(
    __0: (LineNum, (usize, usize), LineNum),
    __1: (LineNum, (String, (usize, usize)), LineNum),
    __2: (LineNum, Token, LineNum),
    __3: (LineNum, ParamDecl, LineNum),
    __4: (LineNum, alloc::vec::Vec<(Token, ParamDecl)>, LineNum),
    __5: (LineNum, Token, LineNum),
    __6: (LineNum, Token, LineNum),
    __7: (LineNum, String, LineNum),
    __8: (LineNum, Token, LineNum),
    __9: (LineNum, Expr, LineNum),
    __10: (LineNum, alloc::vec::Vec<Expr>, LineNum),
    __11: (LineNum, Token, LineNum),
    __12: (LineNum, Token, LineNum),
) -> Feature
{
    let __start0 = __9.0.clone();
    let __end0 = __10.2.clone();
    let __temp0 = __action121(
        __9,
        __10,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action101(
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
        __temp0,
        __11,
        __12,
    )
}

fn __action130<
    'input,
>(
    __0: (LineNum, (usize, usize), LineNum),
    __1: (LineNum, (String, (usize, usize)), LineNum),
    __2: (LineNum, Token, LineNum),
    __3: (LineNum, Token, LineNum),
    __4: (LineNum, Token, LineNum),
    __5: (LineNum, String, LineNum),
    __6: (LineNum, Token, LineNum),
    __7: (LineNum, Expr, LineNum),
    __8: (LineNum, Token, LineNum),
    __9: (LineNum, Token, LineNum),
) -> Feature
{
    let __start0 = __7.0.clone();
    let __end0 = __7.2.clone();
    let __temp0 = __action120(
        __7,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action102(
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __temp0,
        __8,
        __9,
    )
}

fn __action131<
    'input,
>(
    __0: (LineNum, (usize, usize), LineNum),
    __1: (LineNum, (String, (usize, usize)), LineNum),
    __2: (LineNum, Token, LineNum),
    __3: (LineNum, Token, LineNum),
    __4: (LineNum, Token, LineNum),
    __5: (LineNum, String, LineNum),
    __6: (LineNum, Token, LineNum),
    __7: (LineNum, Expr, LineNum),
    __8: (LineNum, alloc::vec::Vec<Expr>, LineNum),
    __9: (LineNum, Token, LineNum),
    __10: (LineNum, Token, LineNum),
) -> Feature
{
    let __start0 = __7.0.clone();
    let __end0 = __8.2.clone();
    let __temp0 = __action121(
        __7,
        __8,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action102(
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __temp0,
        __9,
        __10,
    )
}

pub trait __ToTriple<'input, >
{
    fn to_triple(value: Self) -> Result<(LineNum,Token,LineNum), __lalrpop_util::ParseError<LineNum, Token, LexicalError>>;
}

impl<'input, > __ToTriple<'input, > for (LineNum, Token, LineNum)
{
    fn to_triple(value: Self) -> Result<(LineNum,Token,LineNum), __lalrpop_util::ParseError<LineNum, Token, LexicalError>> {
        Ok(value)
    }
}
impl<'input, > __ToTriple<'input, > for Result<(LineNum, Token, LineNum), LexicalError>
{
    fn to_triple(value: Self) -> Result<(LineNum,Token,LineNum), __lalrpop_util::ParseError<LineNum, Token, LexicalError>> {
        match value {
            Ok(v) => Ok(v),
            Err(error) => Err(__lalrpop_util::ParseError::User { error }),
        }
    }
}
